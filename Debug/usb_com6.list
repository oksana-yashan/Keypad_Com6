
usb_com6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba8  08007ba8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bb0  08007bb0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb0  08007bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb4  08007bb4  00017bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08007bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  200001f8  08007db0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  08007db0  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191f1  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad0  00000000  00000000  00039419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0003cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  0003ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024486  00000000  00000000  0003eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015871  00000000  00000000  00063006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6b47  00000000  00000000  00078877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f3be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  0013f414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a80 	.word	0x08007a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08007a80 	.word	0x08007a80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Display_Init>:
//#include <stdio.h>
#include <string.h>

static char empty_field[] = "                                ";
void Display_Init()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
//	delay_milis(40);
	HAL_Delay(DISPLAY_DELAY_40);
 800056c:	2028      	movs	r0, #40	; 0x28
 800056e:	f000 ff8d 	bl	800148c <HAL_Delay>
	Display_Write_Ins(0x03); 	//as per documentation set 4-bit mode
 8000572:	2003      	movs	r0, #3
 8000574:	f000 f830 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(DISPLAY_DELAY_40);
 8000578:	2028      	movs	r0, #40	; 0x28
 800057a:	f000 ff87 	bl	800148c <HAL_Delay>

	Display_Write_Ins(0x03); 	//as per documentation set 4-bit mode
 800057e:	2003      	movs	r0, #3
 8000580:	f000 f82a 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(DISPLAY_DELAY_40);
 8000584:	2028      	movs	r0, #40	; 0x28
 8000586:	f000 ff81 	bl	800148c <HAL_Delay>

	Display_Write_Ins(0x03); 	//as per documentation set 4-bit mode
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f824 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(DISPLAY_DELAY_40);
 8000590:	2028      	movs	r0, #40	; 0x28
 8000592:	f000 ff7b 	bl	800148c <HAL_Delay>


	Display_Write_Ins(0x02); 	//as per documentation set 4-bit mode
 8000596:	2002      	movs	r0, #2
 8000598:	f000 f81e 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(DISPLAY_DELAY_40);
 800059c:	2028      	movs	r0, #40	; 0x28
 800059e:	f000 ff75 	bl	800148c <HAL_Delay>


//	Display_Write_Ins(0x28);
	Display_Write_Ins(TWO_LINE_MODE);
 80005a2:	2028      	movs	r0, #40	; 0x28
 80005a4:	f000 f818 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(DISPLAY_DELAY);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 ff6f 	bl	800148c <HAL_Delay>

//	Display_Write_Ins(0x0F);
	Display_Write_Ins(DISPLAY_ON | CURSOR_OFF | CURSOR_BLINK_OFF);
 80005ae:	200c      	movs	r0, #12
 80005b0:	f000 f812 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(DISPLAY_DELAY);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 ff69 	bl	800148c <HAL_Delay>

//	Display_Write_Ins(0x01);
	Display_Write_Ins(DISPLAY_CLEAR);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f000 f80c 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(DISPLAY_DELAY);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 ff63 	bl	800148c <HAL_Delay>

//	Display_Write_Ins(0x06);
	Display_Write_Ins(INCREMENT_MODE | ENTIRE_SHIFT_OFF);
 80005c6:	2006      	movs	r0, #6
 80005c8:	f000 f806 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(DISPLAY_DELAY);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 ff5d 	bl	800148c <HAL_Delay>

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <Display_Write_Ins>:




void Display_Write_Ins(char instruction)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_RS, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	4853      	ldr	r0, [pc, #332]	; (8000734 <Display_Write_Ins+0x15c>)
 80005e8:	f001 fa40 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_RW, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f2:	4850      	ldr	r0, [pc, #320]	; (8000734 <Display_Write_Ins+0x15c>)
 80005f4:	f001 fa3a 	bl	8001a6c <HAL_GPIO_WritePin>


	instruction & DISPLAY_BIT_7_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB7, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB7, GPIO_PIN_RESET);
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da06      	bge.n	800060e <Display_Write_Ins+0x36>
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	484b      	ldr	r0, [pc, #300]	; (8000734 <Display_Write_Ins+0x15c>)
 8000608:	f001 fa30 	bl	8001a6c <HAL_GPIO_WritePin>
 800060c:	e005      	b.n	800061a <Display_Write_Ins+0x42>
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	4847      	ldr	r0, [pc, #284]	; (8000734 <Display_Write_Ins+0x15c>)
 8000616:	f001 fa29 	bl	8001a6c <HAL_GPIO_WritePin>
	instruction & DISPLAY_BIT_6_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB6, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB6, GPIO_PIN_RESET);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000620:	2b00      	cmp	r3, #0
 8000622:	d006      	beq.n	8000632 <Display_Write_Ins+0x5a>
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	4842      	ldr	r0, [pc, #264]	; (8000734 <Display_Write_Ins+0x15c>)
 800062c:	f001 fa1e 	bl	8001a6c <HAL_GPIO_WritePin>
 8000630:	e005      	b.n	800063e <Display_Write_Ins+0x66>
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000638:	483e      	ldr	r0, [pc, #248]	; (8000734 <Display_Write_Ins+0x15c>)
 800063a:	f001 fa17 	bl	8001a6c <HAL_GPIO_WritePin>
	instruction & DISPLAY_BIT_5_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB5, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB5, GPIO_PIN_RESET);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	d006      	beq.n	8000656 <Display_Write_Ins+0x7e>
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4839      	ldr	r0, [pc, #228]	; (8000734 <Display_Write_Ins+0x15c>)
 8000650:	f001 fa0c 	bl	8001a6c <HAL_GPIO_WritePin>
 8000654:	e005      	b.n	8000662 <Display_Write_Ins+0x8a>
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065c:	4835      	ldr	r0, [pc, #212]	; (8000734 <Display_Write_Ins+0x15c>)
 800065e:	f001 fa05 	bl	8001a6c <HAL_GPIO_WritePin>
	instruction & DISPLAY_BIT_4_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB4, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB4, GPIO_PIN_RESET);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	2b00      	cmp	r3, #0
 800066a:	d006      	beq.n	800067a <Display_Write_Ins+0xa2>
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000672:	4830      	ldr	r0, [pc, #192]	; (8000734 <Display_Write_Ins+0x15c>)
 8000674:	f001 f9fa 	bl	8001a6c <HAL_GPIO_WritePin>
 8000678:	e005      	b.n	8000686 <Display_Write_Ins+0xae>
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	482c      	ldr	r0, [pc, #176]	; (8000734 <Display_Write_Ins+0x15c>)
 8000682:	f001 f9f3 	bl	8001a6c <HAL_GPIO_WritePin>

	Display_RW_pusle();
 8000686:	f000 f92d 	bl	80008e4 <Display_RW_pusle>
	HAL_Delay(DISPLAY_DELAY);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 fefe 	bl	800148c <HAL_Delay>

	instruction & DISPLAY_BIT_3_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB7, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB7, GPIO_PIN_RESET);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	2b00      	cmp	r3, #0
 8000698:	d006      	beq.n	80006a8 <Display_Write_Ins+0xd0>
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a0:	4824      	ldr	r0, [pc, #144]	; (8000734 <Display_Write_Ins+0x15c>)
 80006a2:	f001 f9e3 	bl	8001a6c <HAL_GPIO_WritePin>
 80006a6:	e005      	b.n	80006b4 <Display_Write_Ins+0xdc>
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ae:	4821      	ldr	r0, [pc, #132]	; (8000734 <Display_Write_Ins+0x15c>)
 80006b0:	f001 f9dc 	bl	8001a6c <HAL_GPIO_WritePin>
	instruction & DISPLAY_BIT_2_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB6, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB6, GPIO_PIN_RESET);
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <Display_Write_Ins+0xf4>
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <Display_Write_Ins+0x15c>)
 80006c6:	f001 f9d1 	bl	8001a6c <HAL_GPIO_WritePin>
 80006ca:	e005      	b.n	80006d8 <Display_Write_Ins+0x100>
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d2:	4818      	ldr	r0, [pc, #96]	; (8000734 <Display_Write_Ins+0x15c>)
 80006d4:	f001 f9ca 	bl	8001a6c <HAL_GPIO_WritePin>
	instruction & DISPLAY_BIT_1_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB5, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB5, GPIO_PIN_RESET);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <Display_Write_Ins+0x118>
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <Display_Write_Ins+0x15c>)
 80006ea:	f001 f9bf 	bl	8001a6c <HAL_GPIO_WritePin>
 80006ee:	e005      	b.n	80006fc <Display_Write_Ins+0x124>
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <Display_Write_Ins+0x15c>)
 80006f8:	f001 f9b8 	bl	8001a6c <HAL_GPIO_WritePin>
	instruction & DISPLAY_BIT_0_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB4, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB4, GPIO_PIN_RESET);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <Display_Write_Ins+0x13c>
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <Display_Write_Ins+0x15c>)
 800070e:	f001 f9ad 	bl	8001a6c <HAL_GPIO_WritePin>
 8000712:	e005      	b.n	8000720 <Display_Write_Ins+0x148>
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <Display_Write_Ins+0x15c>)
 800071c:	f001 f9a6 	bl	8001a6c <HAL_GPIO_WritePin>

	Display_RW_pusle();
 8000720:	f000 f8e0 	bl	80008e4 <Display_RW_pusle>
	HAL_Delay(DISPLAY_DELAY);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 feb1 	bl	800148c <HAL_Delay>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <Display_Write_Data>:

void Display_Write_Data(char data)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_RS, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	4853      	ldr	r0, [pc, #332]	; (8000894 <Display_Write_Data+0x15c>)
 8000748:	f001 f990 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_RW, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000752:	4850      	ldr	r0, [pc, #320]	; (8000894 <Display_Write_Data+0x15c>)
 8000754:	f001 f98a 	bl	8001a6c <HAL_GPIO_WritePin>

	data & DISPLAY_BIT_7_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB7, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB7, GPIO_PIN_RESET);
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	da06      	bge.n	800076e <Display_Write_Data+0x36>
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000766:	484b      	ldr	r0, [pc, #300]	; (8000894 <Display_Write_Data+0x15c>)
 8000768:	f001 f980 	bl	8001a6c <HAL_GPIO_WritePin>
 800076c:	e005      	b.n	800077a <Display_Write_Data+0x42>
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000774:	4847      	ldr	r0, [pc, #284]	; (8000894 <Display_Write_Data+0x15c>)
 8000776:	f001 f979 	bl	8001a6c <HAL_GPIO_WritePin>
	data & DISPLAY_BIT_6_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB6, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB6, GPIO_PIN_RESET);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000780:	2b00      	cmp	r3, #0
 8000782:	d006      	beq.n	8000792 <Display_Write_Data+0x5a>
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078a:	4842      	ldr	r0, [pc, #264]	; (8000894 <Display_Write_Data+0x15c>)
 800078c:	f001 f96e 	bl	8001a6c <HAL_GPIO_WritePin>
 8000790:	e005      	b.n	800079e <Display_Write_Data+0x66>
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000798:	483e      	ldr	r0, [pc, #248]	; (8000894 <Display_Write_Data+0x15c>)
 800079a:	f001 f967 	bl	8001a6c <HAL_GPIO_WritePin>
	data & DISPLAY_BIT_5_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB5, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB5, GPIO_PIN_RESET);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d006      	beq.n	80007b6 <Display_Write_Data+0x7e>
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ae:	4839      	ldr	r0, [pc, #228]	; (8000894 <Display_Write_Data+0x15c>)
 80007b0:	f001 f95c 	bl	8001a6c <HAL_GPIO_WritePin>
 80007b4:	e005      	b.n	80007c2 <Display_Write_Data+0x8a>
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4835      	ldr	r0, [pc, #212]	; (8000894 <Display_Write_Data+0x15c>)
 80007be:	f001 f955 	bl	8001a6c <HAL_GPIO_WritePin>
	data & DISPLAY_BIT_4_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB4, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB4, GPIO_PIN_RESET);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d006      	beq.n	80007da <Display_Write_Data+0xa2>
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d2:	4830      	ldr	r0, [pc, #192]	; (8000894 <Display_Write_Data+0x15c>)
 80007d4:	f001 f94a 	bl	8001a6c <HAL_GPIO_WritePin>
 80007d8:	e005      	b.n	80007e6 <Display_Write_Data+0xae>
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e0:	482c      	ldr	r0, [pc, #176]	; (8000894 <Display_Write_Data+0x15c>)
 80007e2:	f001 f943 	bl	8001a6c <HAL_GPIO_WritePin>

	Display_RW_pusle();
 80007e6:	f000 f87d 	bl	80008e4 <Display_RW_pusle>
	HAL_Delay(DISPLAY_DELAY);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 fe4e 	bl	800148c <HAL_Delay>

	data & DISPLAY_BIT_3_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB7, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB7, GPIO_PIN_RESET);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d006      	beq.n	8000808 <Display_Write_Data+0xd0>
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000800:	4824      	ldr	r0, [pc, #144]	; (8000894 <Display_Write_Data+0x15c>)
 8000802:	f001 f933 	bl	8001a6c <HAL_GPIO_WritePin>
 8000806:	e005      	b.n	8000814 <Display_Write_Data+0xdc>
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080e:	4821      	ldr	r0, [pc, #132]	; (8000894 <Display_Write_Data+0x15c>)
 8000810:	f001 f92c 	bl	8001a6c <HAL_GPIO_WritePin>
	data & DISPLAY_BIT_2_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB6, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB6, GPIO_PIN_RESET);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	2b00      	cmp	r3, #0
 800081c:	d006      	beq.n	800082c <Display_Write_Data+0xf4>
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000824:	481b      	ldr	r0, [pc, #108]	; (8000894 <Display_Write_Data+0x15c>)
 8000826:	f001 f921 	bl	8001a6c <HAL_GPIO_WritePin>
 800082a:	e005      	b.n	8000838 <Display_Write_Data+0x100>
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000832:	4818      	ldr	r0, [pc, #96]	; (8000894 <Display_Write_Data+0x15c>)
 8000834:	f001 f91a 	bl	8001a6c <HAL_GPIO_WritePin>
	data & DISPLAY_BIT_1_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB5, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB5, GPIO_PIN_RESET);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <Display_Write_Data+0x118>
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000848:	4812      	ldr	r0, [pc, #72]	; (8000894 <Display_Write_Data+0x15c>)
 800084a:	f001 f90f 	bl	8001a6c <HAL_GPIO_WritePin>
 800084e:	e005      	b.n	800085c <Display_Write_Data+0x124>
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	480f      	ldr	r0, [pc, #60]	; (8000894 <Display_Write_Data+0x15c>)
 8000858:	f001 f908 	bl	8001a6c <HAL_GPIO_WritePin>
	data & DISPLAY_BIT_0_MASK ? HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB4, GPIO_PIN_SET) : HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_DB4, GPIO_PIN_RESET);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <Display_Write_Data+0x13c>
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <Display_Write_Data+0x15c>)
 800086e:	f001 f8fd 	bl	8001a6c <HAL_GPIO_WritePin>
 8000872:	e005      	b.n	8000880 <Display_Write_Data+0x148>
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <Display_Write_Data+0x15c>)
 800087c:	f001 f8f6 	bl	8001a6c <HAL_GPIO_WritePin>

	Display_RW_pusle();
 8000880:	f000 f830 	bl	80008e4 <Display_RW_pusle>
	HAL_Delay(DISPLAY_DELAY);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 fe01 	bl	800148c <HAL_Delay>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <Display_init_GPIO>:
	}
	HAL_Delay(DISPLAY_DELAY);
}

void Display_init_GPIO(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
	HAL_Delay(400);
 800089e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008a2:	f000 fdf3 	bl	800148c <HAL_Delay>
	setup_clock_for_GPIO(DISPLAY_PORT, ENABLE);
 80008a6:	2101      	movs	r1, #1
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <Display_init_GPIO+0x48>)
 80008aa:	f000 f869 	bl	8000980 <setup_clock_for_GPIO>
	GPIO_InitTypeDef DISPLAY_GPIO;
	DISPLAY_GPIO.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
	DISPLAY_GPIO.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b2:	2302      	movs	r3, #2
 80008b4:	613b      	str	r3, [r7, #16]
	DISPLAY_GPIO.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]

	DISPLAY_GPIO.Pin = DISPLAY_RS |  DISPLAY_RW | DISPLAY_ENA | DISPLAY_DB7 | DISPLAY_DB6 | DISPLAY_DB5 | DISPLAY_DB4;
 80008ba:	f64f 4380 	movw	r3, #64640	; 0xfc80
 80008be:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(DISPLAY_PORT, &DISPLAY_GPIO);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <Display_init_GPIO+0x48>)
 80008c6:	f000 ff33 	bl	8001730 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_GPIO.Pin, GPIO_PIN_SET);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	2201      	movs	r2, #1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <Display_init_GPIO+0x48>)
 80008d4:	f001 f8ca 	bl	8001a6c <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000

080008e4 <Display_RW_pusle>:

//pulse
void Display_RW_pusle(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_ENA, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <Display_RW_pusle+0x28>)
 80008f0:	f001 f8bc 	bl	8001a6c <HAL_GPIO_WritePin>
    HAL_Delay(DISPLAY_DELAY);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 fdc9 	bl	800148c <HAL_Delay>
    HAL_GPIO_WritePin(DISPLAY_PORT, DISPLAY_ENA, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <Display_RW_pusle+0x28>)
 8000902:	f001 f8b3 	bl	8001a6c <HAL_GPIO_WritePin>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <Display_clear>:
	}

}

void Display_clear(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	Display_Write_Ins(DISPLAY_CLEAR);
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fe5f 	bl	80005d8 <Display_Write_Ins>
	HAL_Delay(2);
 800091a:	2002      	movs	r0, #2
 800091c:	f000 fdb6 	bl	800148c <HAL_Delay>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <setup_Display>:
		Display_Write_Data(' ');
	}
}

void setup_Display(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	Display_init_GPIO();
 8000928:	f7ff ffb6 	bl	8000898 <Display_init_GPIO>
	Display_Init();
 800092c:	f7ff fe1c 	bl	8000568 <Display_Init>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <print_display>:

void setup_second_line() {
	Display_Write_Ins(GO_TO_START_SECOND_LINE);
}

void print_display(char ch) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	Display_Write_Data(ch);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fef9 	bl	8000738 <Display_Write_Data>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <print_display_array>:

void print_display_array(char array[4]) {
 800094e:	b580      	push	{r7, lr}
 8000950:	b084      	sub	sp, #16
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; ++i) {
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	e009      	b.n	8000970 <print_display_array+0x22>
		Display_Write_Data(array[i]);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fee7 	bl	8000738 <Display_Write_Data>
	for (int i=0; i<4; ++i) {
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b03      	cmp	r3, #3
 8000974:	ddf2      	ble.n	800095c <print_display_array+0xe>
	}
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <setup_clock_for_GPIO>:
}
*/


void setup_clock_for_GPIO(GPIO_TypeDef* GPIOx, FunctionalState state)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	if (state) {
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d067      	beq.n	8000a62 <setup_clock_for_GPIO+0xe2>
		switch ((int)GPIOx) {
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a56      	ldr	r2, [pc, #344]	; (8000af0 <setup_clock_for_GPIO+0x170>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d054      	beq.n	8000a44 <setup_clock_for_GPIO+0xc4>
 800099a:	4a55      	ldr	r2, [pc, #340]	; (8000af0 <setup_clock_for_GPIO+0x170>)
 800099c:	4293      	cmp	r3, r2
 800099e:	f300 809d 	bgt.w	8000adc <setup_clock_for_GPIO+0x15c>
 80009a2:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <setup_clock_for_GPIO+0x174>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d03e      	beq.n	8000a26 <setup_clock_for_GPIO+0xa6>
 80009a8:	4a52      	ldr	r2, [pc, #328]	; (8000af4 <setup_clock_for_GPIO+0x174>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	f300 8096 	bgt.w	8000adc <setup_clock_for_GPIO+0x15c>
 80009b0:	4a51      	ldr	r2, [pc, #324]	; (8000af8 <setup_clock_for_GPIO+0x178>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d028      	beq.n	8000a08 <setup_clock_for_GPIO+0x88>
 80009b6:	4a50      	ldr	r2, [pc, #320]	; (8000af8 <setup_clock_for_GPIO+0x178>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	f300 808f 	bgt.w	8000adc <setup_clock_for_GPIO+0x15c>
 80009be:	4a4f      	ldr	r2, [pc, #316]	; (8000afc <setup_clock_for_GPIO+0x17c>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d003      	beq.n	80009cc <setup_clock_for_GPIO+0x4c>
 80009c4:	4a4e      	ldr	r2, [pc, #312]	; (8000b00 <setup_clock_for_GPIO+0x180>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d00f      	beq.n	80009ea <setup_clock_for_GPIO+0x6a>
					break;}
				case (int)GPIOE: {
					__HAL_RCC_GPIOE_CLK_ENABLE();
					break; }
				default:
					break;
 80009ca:	e087      	b.n	8000adc <setup_clock_for_GPIO+0x15c>
					__HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
 80009d0:	4b4c      	ldr	r3, [pc, #304]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a4b      	ldr	r2, [pc, #300]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b49      	ldr	r3, [pc, #292]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	69fb      	ldr	r3, [r7, #28]
					break;}
 80009e8:	e07b      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
					__HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a44      	ldr	r2, [pc, #272]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
					break;}
 8000a06:	e06c      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
					__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	4b3d      	ldr	r3, [pc, #244]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a3c      	ldr	r2, [pc, #240]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697b      	ldr	r3, [r7, #20]
					break;}
 8000a24:	e05d      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
					__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a35      	ldr	r2, [pc, #212]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
					break;}
 8000a42:	e04e      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
					__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
					break; }
 8000a60:	e03f      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
			}
	}
	else {
		switch ((int)GPIOx) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <setup_clock_for_GPIO+0x170>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d031      	beq.n	8000ace <setup_clock_for_GPIO+0x14e>
 8000a6a:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <setup_clock_for_GPIO+0x170>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	dc37      	bgt.n	8000ae0 <setup_clock_for_GPIO+0x160>
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <setup_clock_for_GPIO+0x174>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d024      	beq.n	8000ac0 <setup_clock_for_GPIO+0x140>
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <setup_clock_for_GPIO+0x174>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	dc31      	bgt.n	8000ae0 <setup_clock_for_GPIO+0x160>
 8000a7c:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <setup_clock_for_GPIO+0x178>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d017      	beq.n	8000ab2 <setup_clock_for_GPIO+0x132>
 8000a82:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <setup_clock_for_GPIO+0x178>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	dc2b      	bgt.n	8000ae0 <setup_clock_for_GPIO+0x160>
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <setup_clock_for_GPIO+0x17c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d003      	beq.n	8000a96 <setup_clock_for_GPIO+0x116>
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <setup_clock_for_GPIO+0x180>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d007      	beq.n	8000aa4 <setup_clock_for_GPIO+0x124>
							break;}
						case (int)GPIOE:{
							__HAL_RCC_GPIOE_CLK_DISABLE();
							break;}
						default:
							break;
 8000a94:	e024      	b.n	8000ae0 <setup_clock_for_GPIO+0x160>
							__HAL_RCC_GPIOA_CLK_DISABLE();
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000a9c:	f023 0301 	bic.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
							break;}
 8000aa2:	e01e      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
							__HAL_RCC_GPIOB_CLK_DISABLE();
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000aaa:	f023 0302 	bic.w	r3, r3, #2
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
							break;}
 8000ab0:	e017      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
							__HAL_RCC_GPIOC_CLK_DISABLE();
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000ab8:	f023 0304 	bic.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
							break;}
 8000abe:	e010      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
							__HAL_RCC_GPIOD_CLK_DISABLE();
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000ac6:	f023 0308 	bic.w	r3, r3, #8
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
							break;}
 8000acc:	e009      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
							__HAL_RCC_GPIOE_CLK_DISABLE();
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <setup_clock_for_GPIO+0x184>)
 8000ad4:	f023 0310 	bic.w	r3, r3, #16
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
							break;}
 8000ada:	e002      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
					break;
 8000adc:	bf00      	nop
 8000ade:	e000      	b.n	8000ae2 <setup_clock_for_GPIO+0x162>
							break;
 8000ae0:	bf00      	nop
					}
	}


}
 8000ae2:	bf00      	nop
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40020800 	.word	0x40020800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40023800 	.word	0x40023800

08000b08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_GPIOE_CLK_ENABLE();


}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <MX_I2C1_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x58>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000bb2:	f000 ff75 	bl	8001aa0 <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f000 fb1c 	bl	80011f8 <Error_Handler>
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000228 	.word	0x20000228
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2a:	f000 fd81 	bl	8001730 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <delay>:




void delay(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i < 1200000 ; i++);
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	e002      	b.n	8000c72 <delay+0x12>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <delay+0x28>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d9f8      	bls.n	8000c6c <delay+0xc>
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	00124f7f 	.word	0x00124f7f

08000c8c <setup_GPIO_for_keypad>:



void setup_GPIO_for_keypad() {
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

	   //1.Enable the peripheral clock of GPIOD peripheral
		*pClockCtrlReg |= ( 1 << 3);
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <setup_GPIO_for_keypad+0x58>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <setup_GPIO_for_keypad+0x58>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6013      	str	r3, [r2, #0]

	  // 2.configure PD0,PD1,PD2,PD3 as output (rows)
		*pGPIODModeReg &= ~(0xFF); //clear
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <setup_GPIO_for_keypad+0x5c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <setup_GPIO_for_keypad+0x5c>)
 8000ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ca6:	6013      	str	r3, [r2, #0]
		*pGPIODModeReg |= 0x55;   //set
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <setup_GPIO_for_keypad+0x5c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <setup_GPIO_for_keypad+0x5c>)
 8000cae:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000cb2:	6013      	str	r3, [r2, #0]

		// 3. configure PD8 , PD9, PD10, PD11 as input (columns)
	  *pGPIODModeReg &= ~(0xFF << 16);
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <setup_GPIO_for_keypad+0x5c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <setup_GPIO_for_keypad+0x5c>)
 8000cba:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000cbe:	6013      	str	r3, [r2, #0]

		// 4.Enable internal pull-up resistors for PD8 PD9 PD10 PD11
	  *pPullupDownReg &= ~(0xFF << 16);
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <setup_GPIO_for_keypad+0x60>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <setup_GPIO_for_keypad+0x60>)
 8000cc6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000cca:	6013      	str	r3, [r2, #0]
	  *pPullupDownReg |=  (0x55 << 16);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <setup_GPIO_for_keypad+0x60>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <setup_GPIO_for_keypad+0x60>)
 8000cd2:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023830 	.word	0x40023830
 8000ce8:	40020c00 	.word	0x40020c00
 8000cec:	40020c0c 	.word	0x40020c0c

08000cf0 <copy>:


void copy(char* dest, char* src, int len) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
	for (int i=0; i<len; ++i) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <copy+0x28>
		*dest++ = *src++;
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	1c53      	adds	r3, r2, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	1c59      	adds	r1, r3, #1
 8000d0c:	60f9      	str	r1, [r7, #12]
 8000d0e:	7812      	ldrb	r2, [r2, #0]
 8000d10:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<len; ++i) {
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <copy+0x12>
	}
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	371c      	adds	r7, #28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <convert_hex_to_bin>:


void convert_hex_to_bin() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
		int count=0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
		while(n_chars)
 8000d3a:	e095      	b.n	8000e68 <convert_hex_to_bin+0x138>
		{
			switch(data[count])
 8000d3c:	4a50      	ldr	r2, [pc, #320]	; (8000e80 <convert_hex_to_bin+0x150>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3b30      	subs	r3, #48	; 0x30
 8000d46:	2b14      	cmp	r3, #20
 8000d48:	f200 8082 	bhi.w	8000e50 <convert_hex_to_bin+0x120>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <convert_hex_to_bin+0x24>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000da9 	.word	0x08000da9
 8000d58:	08000db5 	.word	0x08000db5
 8000d5c:	08000dc1 	.word	0x08000dc1
 8000d60:	08000dcd 	.word	0x08000dcd
 8000d64:	08000dd9 	.word	0x08000dd9
 8000d68:	08000de5 	.word	0x08000de5
 8000d6c:	08000df1 	.word	0x08000df1
 8000d70:	08000dfd 	.word	0x08000dfd
 8000d74:	08000e09 	.word	0x08000e09
 8000d78:	08000e15 	.word	0x08000e15
 8000d7c:	08000e51 	.word	0x08000e51
 8000d80:	08000e51 	.word	0x08000e51
 8000d84:	08000e51 	.word	0x08000e51
 8000d88:	08000e51 	.word	0x08000e51
 8000d8c:	08000e51 	.word	0x08000e51
 8000d90:	08000e51 	.word	0x08000e51
 8000d94:	08000e51 	.word	0x08000e51
 8000d98:	08000e21 	.word	0x08000e21
 8000d9c:	08000e2d 	.word	0x08000e2d
 8000da0:	08000e39 	.word	0x08000e39
 8000da4:	08000e45 	.word	0x08000e45
			{
				case '0' : copy(str, "0000", 4);
 8000da8:	2204      	movs	r2, #4
 8000daa:	4936      	ldr	r1, [pc, #216]	; (8000e84 <convert_hex_to_bin+0x154>)
 8000dac:	4836      	ldr	r0, [pc, #216]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000dae:	f7ff ff9f 	bl	8000cf0 <copy>
					break;
 8000db2:	e04d      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '1' : copy(str, "0001", 4);
 8000db4:	2204      	movs	r2, #4
 8000db6:	4935      	ldr	r1, [pc, #212]	; (8000e8c <convert_hex_to_bin+0x15c>)
 8000db8:	4833      	ldr	r0, [pc, #204]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000dba:	f7ff ff99 	bl	8000cf0 <copy>
					break;
 8000dbe:	e047      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '2' : copy(str, "0010", 4);
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	4933      	ldr	r1, [pc, #204]	; (8000e90 <convert_hex_to_bin+0x160>)
 8000dc4:	4830      	ldr	r0, [pc, #192]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000dc6:	f7ff ff93 	bl	8000cf0 <copy>
					break;
 8000dca:	e041      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '3' : copy(str, "0011", 4);
 8000dcc:	2204      	movs	r2, #4
 8000dce:	4931      	ldr	r1, [pc, #196]	; (8000e94 <convert_hex_to_bin+0x164>)
 8000dd0:	482d      	ldr	r0, [pc, #180]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000dd2:	f7ff ff8d 	bl	8000cf0 <copy>
					break;
 8000dd6:	e03b      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '4' : copy(str, "0100", 4);
 8000dd8:	2204      	movs	r2, #4
 8000dda:	492f      	ldr	r1, [pc, #188]	; (8000e98 <convert_hex_to_bin+0x168>)
 8000ddc:	482a      	ldr	r0, [pc, #168]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000dde:	f7ff ff87 	bl	8000cf0 <copy>
					break;
 8000de2:	e035      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '5' : copy(str, "0101", 4);
 8000de4:	2204      	movs	r2, #4
 8000de6:	492d      	ldr	r1, [pc, #180]	; (8000e9c <convert_hex_to_bin+0x16c>)
 8000de8:	4827      	ldr	r0, [pc, #156]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000dea:	f7ff ff81 	bl	8000cf0 <copy>
					break;
 8000dee:	e02f      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '6' : copy(str, "0110", 4);
 8000df0:	2204      	movs	r2, #4
 8000df2:	492b      	ldr	r1, [pc, #172]	; (8000ea0 <convert_hex_to_bin+0x170>)
 8000df4:	4824      	ldr	r0, [pc, #144]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000df6:	f7ff ff7b 	bl	8000cf0 <copy>
					break;
 8000dfa:	e029      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '7' : copy(str, "0111", 4);
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	4929      	ldr	r1, [pc, #164]	; (8000ea4 <convert_hex_to_bin+0x174>)
 8000e00:	4821      	ldr	r0, [pc, #132]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000e02:	f7ff ff75 	bl	8000cf0 <copy>
					break;
 8000e06:	e023      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '8' : copy(str, "1000", 4);
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4927      	ldr	r1, [pc, #156]	; (8000ea8 <convert_hex_to_bin+0x178>)
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000e0e:	f7ff ff6f 	bl	8000cf0 <copy>
					break;
 8000e12:	e01d      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case '9' : copy(str, "1001", 4);
 8000e14:	2204      	movs	r2, #4
 8000e16:	4925      	ldr	r1, [pc, #148]	; (8000eac <convert_hex_to_bin+0x17c>)
 8000e18:	481b      	ldr	r0, [pc, #108]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000e1a:	f7ff ff69 	bl	8000cf0 <copy>
					break;
 8000e1e:	e017      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case 'A' : copy(str, "1010", 4);
 8000e20:	2204      	movs	r2, #4
 8000e22:	4923      	ldr	r1, [pc, #140]	; (8000eb0 <convert_hex_to_bin+0x180>)
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000e26:	f7ff ff63 	bl	8000cf0 <copy>
					break;
 8000e2a:	e011      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case 'B' : copy(str, "1011", 4);
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	4921      	ldr	r1, [pc, #132]	; (8000eb4 <convert_hex_to_bin+0x184>)
 8000e30:	4815      	ldr	r0, [pc, #84]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000e32:	f7ff ff5d 	bl	8000cf0 <copy>
					break;
 8000e36:	e00b      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case 'C' : copy(str, "1100", 4);
 8000e38:	2204      	movs	r2, #4
 8000e3a:	491f      	ldr	r1, [pc, #124]	; (8000eb8 <convert_hex_to_bin+0x188>)
 8000e3c:	4812      	ldr	r0, [pc, #72]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000e3e:	f7ff ff57 	bl	8000cf0 <copy>
					break;
 8000e42:	e005      	b.n	8000e50 <convert_hex_to_bin+0x120>
				case 'D' : copy(str, "1101", 4);
 8000e44:	2204      	movs	r2, #4
 8000e46:	491d      	ldr	r1, [pc, #116]	; (8000ebc <convert_hex_to_bin+0x18c>)
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000e4a:	f7ff ff51 	bl	8000cf0 <copy>
					break;
 8000e4e:	bf00      	nop
			}

			output_keypad_data(str);
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <convert_hex_to_bin+0x158>)
 8000e52:	f000 f837 	bl	8000ec4 <output_keypad_data>

			++count;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
			--n_chars;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <convert_hex_to_bin+0x190>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <convert_hex_to_bin+0x190>)
 8000e66:	701a      	strb	r2, [r3, #0]
		while(n_chars)
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <convert_hex_to_bin+0x190>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f47f af65 	bne.w	8000d3c <convert_hex_to_bin+0xc>
		}

		output_keypad_new_line();
 8000e72:	f000 f847 	bl	8000f04 <output_keypad_new_line>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000027c 	.word	0x2000027c
 8000e84:	08007a98 	.word	0x08007a98
 8000e88:	200002a0 	.word	0x200002a0
 8000e8c:	08007aa0 	.word	0x08007aa0
 8000e90:	08007aa8 	.word	0x08007aa8
 8000e94:	08007ab0 	.word	0x08007ab0
 8000e98:	08007ab8 	.word	0x08007ab8
 8000e9c:	08007ac0 	.word	0x08007ac0
 8000ea0:	08007ac8 	.word	0x08007ac8
 8000ea4:	08007ad0 	.word	0x08007ad0
 8000ea8:	08007ad8 	.word	0x08007ad8
 8000eac:	08007ae0 	.word	0x08007ae0
 8000eb0:	08007ae8 	.word	0x08007ae8
 8000eb4:	08007af0 	.word	0x08007af0
 8000eb8:	08007af8 	.word	0x08007af8
 8000ebc:	08007b00 	.word	0x08007b00
 8000ec0:	20000214 	.word	0x20000214

08000ec4 <output_keypad_data>:


void output_keypad_data(char str[4]) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

	copy(str_tx, str, 4);
 8000ecc:	2204      	movs	r2, #4
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <output_keypad_data+0x3c>)
 8000ed2:	f7ff ff0d 	bl	8000cf0 <copy>
	str_tx[4] = '\r';
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <output_keypad_data+0x3c>)
 8000ed8:	220d      	movs	r2, #13
 8000eda:	711a      	strb	r2, [r3, #4]
	str_tx[5] = '\n';
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <output_keypad_data+0x3c>)
 8000ede:	220a      	movs	r2, #10
 8000ee0:	715a      	strb	r2, [r3, #5]
	CDC_Transmit_FS((unsigned char*)str_tx, 6);
 8000ee2:	2106      	movs	r1, #6
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <output_keypad_data+0x3c>)
 8000ee6:	f005 fd03 	bl	80068f0 <CDC_Transmit_FS>
	print_display_array(str);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fd2f 	bl	800094e <print_display_array>
	HAL_Delay(50);
 8000ef0:	2032      	movs	r0, #50	; 0x32
 8000ef2:	f000 facb 	bl	800148c <HAL_Delay>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200002bc 	.word	0x200002bc

08000f04 <output_keypad_new_line>:

void output_keypad_new_line() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

	HAL_Delay(500);
 8000f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0c:	f000 fabe 	bl	800148c <HAL_Delay>
	CDC_Transmit_FS((unsigned char*)new_line, 2);
 8000f10:	2102      	movs	r1, #2
 8000f12:	4802      	ldr	r0, [pc, #8]	; (8000f1c <output_keypad_new_line+0x18>)
 8000f14:	f005 fcec 	bl	80068f0 <CDC_Transmit_FS>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000

08000f20 <Keypad_loop>:

char keypad_symbols[16] = {'1', '2', '3', 'A', '4', '5', '6', 'B', '7', '8', '9', 'C', '*', '0', '#', 'D'};

void Keypad_loop() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
//		  	 if (n_chars == 15) {
//		  		 setup_second_line();
//		  	 }


			for (uint8_t i=0; i<4; ++i) {
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]
 8000f2a:	e0b1      	b.n	8001090 <Keypad_loop+0x170>

				//make all rows HIGH
				*pOutPutDataReg |= 0x0f;
 8000f2c:	4b5d      	ldr	r3, [pc, #372]	; (80010a4 <Keypad_loop+0x184>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a5c      	ldr	r2, [pc, #368]	; (80010a4 <Keypad_loop+0x184>)
 8000f32:	f043 030f 	orr.w	r3, r3, #15
 8000f36:	6013      	str	r3, [r2, #0]

				//make Ri LOW(PD0)
				*pOutPutDataReg &= ~( 1 << i);
 8000f38:	4b5a      	ldr	r3, [pc, #360]	; (80010a4 <Keypad_loop+0x184>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	43d2      	mvns	r2, r2
 8000f46:	4611      	mov	r1, r2
 8000f48:	4a56      	ldr	r2, [pc, #344]	; (80010a4 <Keypad_loop+0x184>)
 8000f4a:	400b      	ands	r3, r1
 8000f4c:	6013      	str	r3, [r2, #0]

				 //scan the columns

				//check C1 of Ri is low or high
				if(!(*pInPutDataReg & ( 1 << 8))) {
 8000f4e:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <Keypad_loop+0x188>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d120      	bne.n	8000f9c <Keypad_loop+0x7c>
					//key is pressed
					if (i != 3) {
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d018      	beq.n	8000f92 <Keypad_loop+0x72>
						delay();
 8000f60:	f7ff fe7e 	bl	8000c60 <delay>
						print_display(keypad_symbols[i*4]);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4a50      	ldr	r2, [pc, #320]	; (80010ac <Keypad_loop+0x18c>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fce1 	bl	8000934 <print_display>
						data[n_chars] = keypad_symbols[i*4];
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4a4e      	ldr	r2, [pc, #312]	; (80010b0 <Keypad_loop+0x190>)
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	; (80010ac <Keypad_loop+0x18c>)
 8000f7e:	5cd2      	ldrb	r2, [r2, r3]
 8000f80:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <Keypad_loop+0x194>)
 8000f82:	545a      	strb	r2, [r3, r1]
						++n_chars;
 8000f84:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <Keypad_loop+0x190>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <Keypad_loop+0x190>)
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e004      	b.n	8000f9c <Keypad_loop+0x7c>
					}
					else {
						Display_Write_Ins(GO_TO_START_SECOND_LINE);
 8000f92:	20c0      	movs	r0, #192	; 0xc0
 8000f94:	f7ff fb20 	bl	80005d8 <Display_Write_Ins>
						convert_hex_to_bin();
 8000f98:	f7ff feca 	bl	8000d30 <convert_hex_to_bin>
					}
				}

				//check C1 of Ri is low or high
				if(!(*pInPutDataReg & ( 1 << 9))) {
 8000f9c:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <Keypad_loop+0x188>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d119      	bne.n	8000fdc <Keypad_loop+0xbc>
					//key is pressed
					delay();
 8000fa8:	f7ff fe5a 	bl	8000c60 <delay>
					print_display(keypad_symbols[i*4+1]);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <Keypad_loop+0x18c>)
 8000fb4:	5cd3      	ldrb	r3, [r2, r3]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fcbc 	bl	8000934 <print_display>
					data[n_chars] = keypad_symbols[i*4+1];
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <Keypad_loop+0x190>)
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4a38      	ldr	r2, [pc, #224]	; (80010ac <Keypad_loop+0x18c>)
 8000fca:	5cd2      	ldrb	r2, [r2, r3]
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <Keypad_loop+0x194>)
 8000fce:	545a      	strb	r2, [r3, r1]
					++n_chars;
 8000fd0:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <Keypad_loop+0x190>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <Keypad_loop+0x190>)
 8000fda:	701a      	strb	r2, [r3, #0]
				}

				//check C1 of Ri is low or high
				if(!(*pInPutDataReg & ( 1 << 10))) {
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <Keypad_loop+0x188>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d125      	bne.n	8001034 <Keypad_loop+0x114>
					//key is pressed
					if (i != 3) {
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d01a      	beq.n	8001024 <Keypad_loop+0x104>
						delay();
 8000fee:	f7ff fe37 	bl	8000c60 <delay>
						print_display(keypad_symbols[i*4+2]);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	; (80010ac <Keypad_loop+0x18c>)
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fc99 	bl	8000934 <print_display>
						data[n_chars] = keypad_symbols[i*4+2];
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <Keypad_loop+0x190>)
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	4611      	mov	r1, r2
 800100e:	4a27      	ldr	r2, [pc, #156]	; (80010ac <Keypad_loop+0x18c>)
 8001010:	5cd2      	ldrb	r2, [r2, r3]
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <Keypad_loop+0x194>)
 8001014:	545a      	strb	r2, [r3, r1]
						++n_chars;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <Keypad_loop+0x190>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <Keypad_loop+0x190>)
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e007      	b.n	8001034 <Keypad_loop+0x114>
					}
					else {
						Display_clear();
 8001024:	f7ff fc74 	bl	8000910 <Display_clear>
						Display_Write_Ins(GO_TO_START_FIRST_LINE);
 8001028:	2080      	movs	r0, #128	; 0x80
 800102a:	f7ff fad5 	bl	80005d8 <Display_Write_Ins>
						n_chars = 0;
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <Keypad_loop+0x190>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
					}
				}

				//check C1 of Ri is low or high
				if(!(*pInPutDataReg & ( 1 << 11))) {
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <Keypad_loop+0x188>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800103c:	2b00      	cmp	r3, #0
 800103e:	d122      	bne.n	8001086 <Keypad_loop+0x166>
					//key is pressed
					if (i != 3) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d01a      	beq.n	800107c <Keypad_loop+0x15c>
						delay();
 8001046:	f7ff fe0b 	bl	8000c60 <delay>
						print_display(keypad_symbols[i*4+3]);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	3303      	adds	r3, #3
 8001050:	4a16      	ldr	r2, [pc, #88]	; (80010ac <Keypad_loop+0x18c>)
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fc6d 	bl	8000934 <print_display>
						data[n_chars] = keypad_symbols[i*4+3];
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	3303      	adds	r3, #3
 8001060:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <Keypad_loop+0x190>)
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	4611      	mov	r1, r2
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <Keypad_loop+0x18c>)
 8001068:	5cd2      	ldrb	r2, [r2, r3]
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <Keypad_loop+0x194>)
 800106c:	545a      	strb	r2, [r3, r1]
						++n_chars;
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <Keypad_loop+0x190>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <Keypad_loop+0x190>)
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e004      	b.n	8001086 <Keypad_loop+0x166>
					}
					else {
						Display_Write_Ins(GO_TO_START_SECOND_LINE);
 800107c:	20c0      	movs	r0, #192	; 0xc0
 800107e:	f7ff faab 	bl	80005d8 <Display_Write_Ins>
						convert_hex_to_bin();
 8001082:	f7ff fe55 	bl	8000d30 <convert_hex_to_bin>
					}
				}
				delay();
 8001086:	f7ff fdeb 	bl	8000c60 <delay>
			for (uint8_t i=0; i<4; ++i) {
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	3301      	adds	r3, #1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b03      	cmp	r3, #3
 8001094:	f67f af4a 	bls.w	8000f2c <Keypad_loop+0xc>
			}
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020c14 	.word	0x40020c14
 80010a8:	40020c10 	.word	0x40020c10
 80010ac:	20000004 	.word	0x20000004
 80010b0:	20000214 	.word	0x20000214
 80010b4:	2000027c 	.word	0x2000027c

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c2:	f000 f971 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c6:	f000 f819 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ca:	f7ff fd1d 	bl	8000b08 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ce:	f7ff fd51 	bl	8000b74 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80010d2:	f005 fb45 	bl	8006760 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	sprintf(str_tx, "HWorld\r\n");
 80010d6:	4907      	ldr	r1, [pc, #28]	; (80010f4 <main+0x3c>)
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <main+0x40>)
 80010da:	f006 f949 	bl	8007370 <siprintf>
//	Display_Init();
//	Display_Write_Ins(GO_TO_START_FIRST_LINE);
//	Display_Write_Data('H');
//	HAL_Delay(500);

	  setup_GPIO_for_keypad();
 80010de:	f7ff fdd5 	bl	8000c8c <setup_GPIO_for_keypad>

	  setup_Display();
 80010e2:	f7ff fc1f 	bl	8000924 <setup_Display>
	  Display_Write_Ins(GO_TO_START_FIRST_LINE);
 80010e6:	2080      	movs	r0, #128	; 0x80
 80010e8:	f7ff fa76 	bl	80005d8 <Display_Write_Ins>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Keypad_loop();
 80010ec:	f7ff ff18 	bl	8000f20 <Keypad_loop>
 80010f0:	e7fc      	b.n	80010ec <main+0x34>
 80010f2:	bf00      	nop
 80010f4:	08007b08 	.word	0x08007b08
 80010f8:	200002bc 	.word	0x200002bc

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f86e 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <SystemClock_Config+0xf0>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a30      	ldr	r2, [pc, #192]	; (80011ec <SystemClock_Config+0xf0>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <SystemClock_Config+0xf0>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <SystemClock_Config+0xf4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <SystemClock_Config+0xf4>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <SystemClock_Config+0xf4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001158:	2301      	movs	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001162:	2302      	movs	r3, #2
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001166:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800116c:	2304      	movs	r3, #4
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001170:	23a8      	movs	r3, #168	; 0xa8
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  //  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001178:	2307      	movs	r3, #7
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f001 ff55 	bl	8003030 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800118c:	f000 f834 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800119c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2105      	movs	r1, #5
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 f9ae 	bl	8003510 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ba:	f000 f81d 	bl	80011f8 <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80011be:	f002 fb6f 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <SystemClock_Config+0xf8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	099b      	lsrs	r3, r3, #6
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa86 	bl	80016de <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011d2:	2004      	movs	r0, #4
 80011d4:	f000 fa90 	bl	80016f8 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 fa53 	bl	800168a <HAL_NVIC_SetPriority>

}
 80011e4:	bf00      	nop
 80011e6:	3750      	adds	r7, #80	; 0x50
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000
 80011f4:	10624dd3 	.word	0x10624dd3

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001242:	2007      	movs	r0, #7
 8001244:	f000 fa16 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 f8d4 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <OTG_FS_IRQHandler+0x10>)
 80012ae:	f000 fe8b 	bl	8001fc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000828 	.word	0x20000828

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f005 ff44 	bl	8007178 <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20020000 	.word	0x20020000
 800131c:	00000400 	.word	0x00000400
 8001320:	20000218 	.word	0x20000218
 8001324:	20000c40 	.word	0x20000c40

08001328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <SystemInit+0x28>)
 800132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001332:	4a07      	ldr	r2, [pc, #28]	; (8001350 <SystemInit+0x28>)
 8001334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SystemInit+0x28>)
 800133e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001342:	609a      	str	r2, [r3, #8]
#endif
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001358:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800135a:	e003      	b.n	8001364 <LoopCopyDataInit>

0800135c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800135e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001360:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001362:	3104      	adds	r1, #4

08001364 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001368:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800136a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800136c:	d3f6      	bcc.n	800135c <CopyDataInit>
  ldr  r2, =_sbss
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001370:	e002      	b.n	8001378 <LoopFillZerobss>

08001372 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001372:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001374:	f842 3b04 	str.w	r3, [r2], #4

08001378 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800137a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800137c:	d3f9      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800137e:	f7ff ffd3 	bl	8001328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f005 feff 	bl	8007184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001386:	f7ff fe97 	bl	80010b8 <main>
  bx  lr    
 800138a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800138c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001390:	08007bb8 	.word	0x08007bb8
  ldr  r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001398:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 800139c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80013a0:	20000c40 	.word	0x20000c40

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>
	...

080013a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <HAL_Init+0x40>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_Init+0x40>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_Init+0x40>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f94f 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f808 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff ff12 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f967 	bl	80016de <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f92f 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000014 	.word	0x20000014
 8001444:	2000001c 	.word	0x2000001c
 8001448:	20000018 	.word	0x20000018

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	2000001c 	.word	0x2000001c
 8001470:	200002d4 	.word	0x200002d4

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200002d4 	.word	0x200002d4

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff ffee 	bl	8001474 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d005      	beq.n	80014b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_Delay+0x44>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014b2:	bf00      	nop
 80014b4:	f7ff ffde 	bl	8001474 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8f7      	bhi.n	80014b4 <HAL_Delay+0x28>
  {
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000001c 	.word	0x2000001c

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff8e 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff29 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff3e 	bl	800151c <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff8e 	bl	80015c8 <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5d 	bl	8001574 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff31 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b04      	cmp	r3, #4
 8001704:	d106      	bne.n	8001714 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001712:	e005      	b.n	8001720 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e16b      	b.n	8001a28 <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	f040 815a 	bne.w	8001a22 <HAL_GPIO_Init+0x2f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d00b      	beq.n	800178e <HAL_GPIO_Init+0x5e>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001782:	2b11      	cmp	r3, #17
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b12      	cmp	r3, #18
 800178c:	d130      	bne.n	80017f0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x100>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b4 	beq.w	8001a22 <HAL_GPIO_Init+0x2f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b60      	ldr	r3, [pc, #384]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a5f      	ldr	r2, [pc, #380]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d6:	4a5b      	ldr	r2, [pc, #364]	; (8001a44 <HAL_GPIO_Init+0x314>)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_GPIO_Init+0x318>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x22a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a51      	ldr	r2, [pc, #324]	; (8001a4c <HAL_GPIO_Init+0x31c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a50      	ldr	r2, [pc, #320]	; (8001a50 <HAL_GPIO_Init+0x320>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4f      	ldr	r2, [pc, #316]	; (8001a54 <HAL_GPIO_Init+0x324>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4e      	ldr	r2, [pc, #312]	; (8001a58 <HAL_GPIO_Init+0x328>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x21a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4d      	ldr	r2, [pc, #308]	; (8001a5c <HAL_GPIO_Init+0x32c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x216>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_GPIO_Init+0x330>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x212>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <HAL_GPIO_Init+0x334>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x20e>
 800193a:	2307      	movs	r3, #7
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x22c>
 800193e:	2308      	movs	r3, #8
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x22c>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x22c>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x22c>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x22c>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x22c>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x22c>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x22c>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4935      	ldr	r1, [pc, #212]	; (8001a44 <HAL_GPIO_Init+0x314>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_GPIO_Init+0x338>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800199e:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_GPIO_Init+0x338>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019a4:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_GPIO_Init+0x338>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c8:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <HAL_GPIO_Init+0x338>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_GPIO_Init+0x338>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2c2>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <HAL_GPIO_Init+0x338>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_GPIO_Init+0x338>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2ec>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <HAL_GPIO_Init+0x338>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae90 	bls.w	8001750 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40021c00 	.word	0x40021c00
 8001a68:	40013c00 	.word	0x40013c00

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	619a      	str	r2, [r3, #24]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e12b      	b.n	8001d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff f882 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	; 0x24
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b04:	f001 fed8 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a81      	ldr	r2, [pc, #516]	; (8001d14 <HAL_I2C_Init+0x274>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d807      	bhi.n	8001b24 <HAL_I2C_Init+0x84>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a80      	ldr	r2, [pc, #512]	; (8001d18 <HAL_I2C_Init+0x278>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	bf94      	ite	ls
 8001b1c:	2301      	movls	r3, #1
 8001b1e:	2300      	movhi	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e006      	b.n	8001b32 <HAL_I2C_Init+0x92>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a7d      	ldr	r2, [pc, #500]	; (8001d1c <HAL_I2C_Init+0x27c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	bf94      	ite	ls
 8001b2c:	2301      	movls	r3, #1
 8001b2e:	2300      	movhi	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e7      	b.n	8001d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4a78      	ldr	r2, [pc, #480]	; (8001d20 <HAL_I2C_Init+0x280>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4a6a      	ldr	r2, [pc, #424]	; (8001d14 <HAL_I2C_Init+0x274>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d802      	bhi.n	8001b74 <HAL_I2C_Init+0xd4>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3301      	adds	r3, #1
 8001b72:	e009      	b.n	8001b88 <HAL_I2C_Init+0xe8>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4a69      	ldr	r2, [pc, #420]	; (8001d24 <HAL_I2C_Init+0x284>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	3301      	adds	r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	495c      	ldr	r1, [pc, #368]	; (8001d14 <HAL_I2C_Init+0x274>)
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d819      	bhi.n	8001bdc <HAL_I2C_Init+0x13c>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1e59      	subs	r1, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_I2C_Init+0x138>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1e59      	subs	r1, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd6:	e051      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e04f      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <HAL_I2C_Init+0x168>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	440b      	add	r3, r1
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e012      	b.n	8001c2e <HAL_I2C_Init+0x18e>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	0099      	lsls	r1, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Init+0x196>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e022      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10e      	bne.n	8001c5c <HAL_I2C_Init+0x1bc>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	440b      	add	r3, r1
 8001c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c5a:	e00f      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	6809      	ldr	r1, [r1, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6911      	ldr	r1, [r2, #16]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	000186a0 	.word	0x000186a0
 8001d18:	001e847f 	.word	0x001e847f
 8001d1c:	003d08ff 	.word	0x003d08ff
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2a:	b08f      	sub	sp, #60	; 0x3c
 8001d2c:	af0a      	add	r7, sp, #40	; 0x28
 8001d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e10f      	b.n	8001f5a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d106      	bne.n	8001d5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f004 ff13 	bl	8006b80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 fec6 	bl	8003b0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	687e      	ldr	r6, [r7, #4]
 8001d86:	466d      	mov	r5, sp
 8001d88:	f106 0410 	add.w	r4, r6, #16
 8001d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d9c:	1d33      	adds	r3, r6, #4
 8001d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da0:	6838      	ldr	r0, [r7, #0]
 8001da2:	f001 fd9d 	bl	80038e0 <USB_CoreInit>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0d0      	b.n	8001f5a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 feb4 	bl	8003b2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e04a      	b.n	8001e60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	333d      	adds	r3, #61	; 0x3d
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	333c      	adds	r3, #60	; 0x3c
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	b298      	uxth	r0, r3
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3342      	adds	r3, #66	; 0x42
 8001e06:	4602      	mov	r2, r0
 8001e08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	333f      	adds	r3, #63	; 0x3f
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3344      	adds	r3, #68	; 0x44
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	3348      	adds	r3, #72	; 0x48
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	3350      	adds	r3, #80	; 0x50
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d3af      	bcc.n	8001dca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e044      	b.n	8001efa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d3b5      	bcc.n	8001e70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	687e      	ldr	r6, [r7, #4]
 8001f0c:	466d      	mov	r5, sp
 8001f0e:	f106 0410 	add.w	r4, r6, #16
 8001f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f22:	1d33      	adds	r3, r6, #4
 8001f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f001 fe2a 	bl	8003b80 <USB_DevInit>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00d      	b.n	8001f5a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fe72 	bl	8004c3c <USB_DevDisconnect>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_PCD_Start+0x1c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e020      	b.n	8001fc0 <HAL_PCD_Start+0x5e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d109      	bne.n	8001fa2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d005      	beq.n	8001fa2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 fd9e 	bl	8003ae8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fe22 	bl	8004bfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b08d      	sub	sp, #52	; 0x34
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fee0 	bl	8004da4 <USB_GetMode>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 839d 	bne.w	8002726 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f002 fe44 	bl	8004c7e <USB_ReadInterrupts>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8393 	beq.w	8002724 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fe3b 	bl	8004c7e <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d107      	bne.n	8002022 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f002 0202 	and.w	r2, r2, #2
 8002020:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fe29 	bl	8004c7e <USB_ReadInterrupts>
 800202c:	4603      	mov	r3, r0
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b10      	cmp	r3, #16
 8002034:	d161      	bne.n	80020fa <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0210 	bic.w	r2, r2, #16
 8002044:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f003 020f 	and.w	r2, r3, #15
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	0c5b      	lsrs	r3, r3, #17
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	2b02      	cmp	r3, #2
 8002070:	d124      	bne.n	80020bc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d035      	beq.n	80020ea <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002088:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	6a38      	ldr	r0, [r7, #32]
 8002092:	f002 fc8f 	bl	80049b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a2:	441a      	add	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	699a      	ldr	r2, [r3, #24]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b4:	441a      	add	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	619a      	str	r2, [r3, #24]
 80020ba:	e016      	b.n	80020ea <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	0c5b      	lsrs	r3, r3, #17
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d110      	bne.n	80020ea <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020ce:	2208      	movs	r2, #8
 80020d0:	4619      	mov	r1, r3
 80020d2:	6a38      	ldr	r0, [r7, #32]
 80020d4:	f002 fc6e 	bl	80049b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e4:	441a      	add	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0210 	orr.w	r2, r2, #16
 80020f8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fdbd 	bl	8004c7e <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800210e:	d16e      	bne.n	80021ee <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f002 fdc3 	bl	8004ca4 <USB_ReadDevAllOutEpInterrupt>
 800211e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002120:	e062      	b.n	80021e8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d057      	beq.n	80021dc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f002 fde8 	bl	8004d0c <USB_ReadDevOutEPInterrupt>
 800213c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002154:	461a      	mov	r2, r3
 8002156:	2301      	movs	r3, #1
 8002158:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800215a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fdb1 	bl	8002cc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002178:	461a      	mov	r2, r3
 800217a:	2308      	movs	r3, #8
 800217c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800217e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 feab 	bl	8002edc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	2310      	movs	r3, #16
 80021a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b8:	461a      	mov	r2, r3
 80021ba:	2320      	movs	r3, #32
 80021bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d4:	461a      	mov	r2, r3
 80021d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3301      	adds	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d199      	bne.n	8002122 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 fd43 	bl	8004c7e <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002202:	f040 80c0 	bne.w	8002386 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fd64 	bl	8004cd8 <USB_ReadDevAllInEpInterrupt>
 8002210:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002216:	e0b2      	b.n	800237e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80a7 	beq.w	8002372 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fd8a 	bl	8004d48 <USB_ReadDevInEPInterrupt>
 8002234:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d057      	beq.n	80022f0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	2201      	movs	r2, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	69f9      	ldr	r1, [r7, #28]
 800225c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002260:	4013      	ands	r3, r2
 8002262:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002270:	461a      	mov	r2, r3
 8002272:	2301      	movs	r3, #1
 8002274:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d132      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	3348      	adds	r3, #72	; 0x48
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4403      	add	r3, r0
 800229e:	3344      	adds	r3, #68	; 0x44
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4419      	add	r1, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4403      	add	r3, r0
 80022b2:	3348      	adds	r3, #72	; 0x48
 80022b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d113      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x31c>
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3350      	adds	r3, #80	; 0x50
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d108      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022dc:	461a      	mov	r2, r3
 80022de:	2101      	movs	r1, #1
 80022e0:	f002 fd92 	bl	8004e08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f004 fcc9 	bl	8006c82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002306:	461a      	mov	r2, r3
 8002308:	2308      	movs	r3, #8
 800230a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002322:	461a      	mov	r2, r3
 8002324:	2310      	movs	r3, #16
 8002326:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800233e:	461a      	mov	r2, r3
 8002340:	2340      	movs	r3, #64	; 0x40
 8002342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235a:	461a      	mov	r2, r3
 800235c:	2302      	movs	r3, #2
 800235e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800236a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fc1b 	bl	8002ba8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	3301      	adds	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	f47f af49 	bne.w	8002218 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fc77 	bl	8004c7e <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800239a:	d122      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023c2:	2100      	movs	r1, #0
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fe27 	bl	8003018 <HAL_PCDEx_LPM_Callback>
 80023ca:	e002      	b.n	80023d2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f004 fccf 	bl	8006d70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 fc49 	bl	8004c7e <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f6:	d112      	bne.n	800241e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d102      	bne.n	800240e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f004 fc8b 	bl	8006d24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800241c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f002 fc2b 	bl	8004c7e <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	f040 80c7 	bne.w	80025c4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2110      	movs	r1, #16
 8002450:	4618      	mov	r0, r3
 8002452:	f001 fcf9 	bl	8003e48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245a:	e056      	b.n	800250a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002468:	461a      	mov	r2, r3
 800246a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800246e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002480:	0151      	lsls	r1, r2, #5
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	440a      	add	r2, r1
 8002486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800248a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800248e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a0:	0151      	lsls	r1, r2, #5
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	440a      	add	r2, r1
 80024a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024bc:	461a      	mov	r2, r3
 80024be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d4:	0151      	lsls	r1, r2, #5
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	440a      	add	r2, r1
 80024da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f4:	0151      	lsls	r1, r2, #5
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	440a      	add	r2, r1
 80024fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002502:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	3301      	adds	r3, #1
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002510:	429a      	cmp	r2, r3
 8002512:	d3a3      	bcc.n	800245c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002522:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002526:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	2b00      	cmp	r3, #0
 800252e:	d016      	beq.n	800255e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002540:	f043 030b 	orr.w	r3, r3, #11
 8002544:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002556:	f043 030b 	orr.w	r3, r3, #11
 800255a:	6453      	str	r3, [r2, #68]	; 0x44
 800255c:	e015      	b.n	800258a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002570:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002574:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002584:	f043 030b 	orr.w	r3, r3, #11
 8002588:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002598:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800259c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025ae:	461a      	mov	r2, r3
 80025b0:	f002 fc2a 	bl	8004e08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 fb58 	bl	8004c7e <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d8:	d124      	bne.n	8002624 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fbee 	bl	8004dc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 fc8e 	bl	8003f0a <USB_GetDevSpeed>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681c      	ldr	r4, [r3, #0]
 80025fa:	f001 f951 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80025fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	4620      	mov	r0, r4
 800260a:	f001 f9cb 	bl	80039a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f004 fb5f 	bl	8006cd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002622:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fb28 	bl	8004c7e <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d10a      	bne.n	800264e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f004 fb3c 	bl	8006cb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 0208 	and.w	r2, r2, #8
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f002 fb13 	bl	8004c7e <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002662:	d10f      	bne.n	8002684 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	b2db      	uxtb	r3, r3
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f004 fb9e 	bl	8006db0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f002 faf8 	bl	8004c7e <USB_ReadInterrupts>
 800268e:	4603      	mov	r3, r0
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002698:	d10f      	bne.n	80026ba <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f004 fb71 	bl	8006d8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 fadd 	bl	8004c7e <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ce:	d10a      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f004 fb7f 	bl	8006dd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fac7 	bl	8004c7e <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d115      	bne.n	8002726 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f004 fb6f 	bl	8006df0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	e000      	b.n	8002726 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002724:	bf00      	nop
    }
  }
}
 8002726:	3734      	adds	r7, #52	; 0x34
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}

0800272c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_PCD_SetAddress+0x1a>
 8002742:	2302      	movs	r3, #2
 8002744:	e013      	b.n	800276e <HAL_PCD_SetAddress+0x42>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f002 fa25 	bl	8004bae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	4608      	mov	r0, r1
 8002780:	4611      	mov	r1, r2
 8002782:	461a      	mov	r2, r3
 8002784:	4603      	mov	r3, r0
 8002786:	70fb      	strb	r3, [r7, #3]
 8002788:	460b      	mov	r3, r1
 800278a:	803b      	strh	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002798:	2b00      	cmp	r3, #0
 800279a:	da0f      	bge.n	80027bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 020f 	and.w	r2, r3, #15
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	3338      	adds	r3, #56	; 0x38
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	705a      	strb	r2, [r3, #1]
 80027ba:	e00f      	b.n	80027dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	f003 020f 	and.w	r2, r3, #15
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	3304      	adds	r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027e8:	883a      	ldrh	r2, [r7, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	78ba      	ldrb	r2, [r7, #2]
 80027f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002806:	78bb      	ldrb	r3, [r7, #2]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d102      	bne.n	8002812 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_PCD_EP_Open+0xaa>
 800281c:	2302      	movs	r3, #2
 800281e:	e00e      	b.n	800283e <HAL_PCD_EP_Open+0xc8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68f9      	ldr	r1, [r7, #12]
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fb90 	bl	8003f54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800283c:	7afb      	ldrb	r3, [r7, #11]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002856:	2b00      	cmp	r3, #0
 8002858:	da0f      	bge.n	800287a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3338      	adds	r3, #56	; 0x38
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	3304      	adds	r3, #4
 8002870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	705a      	strb	r2, [r3, #1]
 8002878:	e00f      	b.n	800289a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	3304      	adds	r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_PCD_EP_Close+0x6e>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e00e      	b.n	80028d2 <HAL_PCD_EP_Close+0x8c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fbce 	bl	8004064 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	460b      	mov	r3, r1
 80028e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2200      	movs	r2, #0
 800291a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800291c:	7afb      	ldrb	r3, [r7, #11]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	b2da      	uxtb	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	f001 fea9 	bl	80046a4 <USB_EP0StartXfer>
 8002952:	e008      	b.n	8002966 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	6979      	ldr	r1, [r7, #20]
 8002962:	f001 fc5b 	bl	800421c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	460b      	mov	r3, r1
 80029ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b0:	7afb      	ldrb	r3, [r7, #11]
 80029b2:	f003 020f 	and.w	r2, r3, #15
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	3338      	adds	r3, #56	; 0x38
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	3304      	adds	r3, #4
 80029c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2201      	movs	r2, #1
 80029de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e0:	7afb      	ldrb	r3, [r7, #11]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d102      	bne.n	80029fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029fa:	7afb      	ldrb	r3, [r7, #11]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6979      	ldr	r1, [r7, #20]
 8002a12:	f001 fe47 	bl	80046a4 <USB_EP0StartXfer>
 8002a16:	e008      	b.n	8002a2a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	6979      	ldr	r1, [r7, #20]
 8002a26:	f001 fbf9 	bl	800421c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 020f 	and.w	r2, r3, #15
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d901      	bls.n	8002a52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e050      	b.n	8002af4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	da0f      	bge.n	8002a7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	f003 020f 	and.w	r2, r3, #15
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	3338      	adds	r3, #56	; 0x38
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3304      	adds	r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	705a      	strb	r2, [r3, #1]
 8002a78:	e00d      	b.n	8002a96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_PCD_EP_SetStall+0x82>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e01e      	b.n	8002af4 <HAL_PCD_EP_SetStall+0xc0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f001 ff9e 	bl	8004a06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	b2d9      	uxtb	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f002 f98f 	bl	8004e08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 020f 	and.w	r2, r3, #15
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d901      	bls.n	8002b1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e042      	b.n	8002ba0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da0f      	bge.n	8002b42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3338      	adds	r3, #56	; 0x38
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	705a      	strb	r2, [r3, #1]
 8002b40:	e00f      	b.n	8002b62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	3304      	adds	r3, #4
 8002b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_EP_ClrStall+0x86>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e00e      	b.n	8002ba0 <HAL_PCD_EP_ClrStall+0xa4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f001 ffa6 	bl	8004ae2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	3338      	adds	r3, #56	; 0x38
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d901      	bls.n	8002be0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e06c      	b.n	8002cba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d902      	bls.n	8002bfc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	3303      	adds	r3, #3
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c04:	e02b      	b.n	8002c5e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d902      	bls.n	8002c22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3303      	adds	r3, #3
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68d9      	ldr	r1, [r3, #12]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4603      	mov	r3, r0
 8002c40:	6978      	ldr	r0, [r7, #20]
 8002c42:	f001 fe82 	bl	800494a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	441a      	add	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	441a      	add	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d809      	bhi.n	8002c88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d203      	bcs.n	8002c88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1be      	bne.n	8002c06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d811      	bhi.n	8002cb8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	6939      	ldr	r1, [r7, #16]
 8002cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	333c      	adds	r3, #60	; 0x3c
 8002cdc:	3304      	adds	r3, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 80a0 	bne.w	8002e3c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a72      	ldr	r2, [pc, #456]	; (8002ed4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	f240 80dd 	bls.w	8002eca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80d7 	beq.w	8002eca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d2e:	6093      	str	r3, [r2, #8]
 8002d30:	e0cb      	b.n	8002eca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	6093      	str	r3, [r2, #8]
 8002d4e:	e0bc      	b.n	8002eca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 80b7 	bne.w	8002eca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a5d      	ldr	r2, [pc, #372]	; (8002ed4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d90f      	bls.n	8002d84 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d80:	6093      	str	r3, [r2, #8]
 8002d82:	e0a2      	b.n	8002eca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d96:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	0159      	lsls	r1, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	440b      	add	r3, r1
 8002da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002daa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4403      	add	r3, r0
 8002dba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002dbe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4403      	add	r3, r0
 8002de2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4419      	add	r1, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4403      	add	r3, r0
 8002df8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dfc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d114      	bne.n	8002e2e <PCD_EP_OutXfrComplete_int+0x16a>
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d108      	bne.n	8002e2e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e26:	461a      	mov	r2, r3
 8002e28:	2101      	movs	r1, #1
 8002e2a:	f001 ffed 	bl	8004e08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f003 ff09 	bl	8006c4c <HAL_PCD_DataOutStageCallback>
 8002e3a:	e046      	b.n	8002eca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a26      	ldr	r2, [pc, #152]	; (8002ed8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d124      	bne.n	8002e8e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e60:	6093      	str	r3, [r2, #8]
 8002e62:	e032      	b.n	8002eca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f003 fee0 	bl	8006c4c <HAL_PCD_DataOutStageCallback>
 8002e8c:	e01d      	b.n	8002eca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d114      	bne.n	8002ebe <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f001 ffa5 	bl	8004e08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f003 fec1 	bl	8006c4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	4f54300a 	.word	0x4f54300a
 8002ed8:	4f54310a 	.word	0x4f54310a

08002edc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	333c      	adds	r3, #60	; 0x3c
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d90e      	bls.n	8002f30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f003 fe79 	bl	8006c28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d90c      	bls.n	8002f58 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d108      	bne.n	8002f58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f50:	461a      	mov	r2, r3
 8002f52:	2101      	movs	r1, #1
 8002f54:	f001 ff58 	bl	8004e08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	4f54300a 	.word	0x4f54300a

08002f68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]
 8002f74:	4613      	mov	r3, r2
 8002f76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f86:	883b      	ldrh	r3, [r7, #0]
 8002f88:	0419      	lsls	r1, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
 8002f94:	e028      	b.n	8002fe8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e00d      	b.n	8002fc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	3340      	adds	r3, #64	; 0x40
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d3ec      	bcc.n	8002faa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fd0:	883b      	ldrh	r3, [r7, #0]
 8002fd2:	0418      	lsls	r0, r3, #16
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	4302      	orrs	r2, r0
 8002fe0:	3340      	adds	r3, #64	; 0x40
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e25b      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d075      	beq.n	800313a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304e:	4ba3      	ldr	r3, [pc, #652]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b04      	cmp	r3, #4
 8003058:	d00c      	beq.n	8003074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305a:	4ba0      	ldr	r3, [pc, #640]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003062:	2b08      	cmp	r3, #8
 8003064:	d112      	bne.n	800308c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003066:	4b9d      	ldr	r3, [pc, #628]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003072:	d10b      	bne.n	800308c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	4b99      	ldr	r3, [pc, #612]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05b      	beq.n	8003138 <HAL_RCC_OscConfig+0x108>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d157      	bne.n	8003138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e236      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d106      	bne.n	80030a4 <HAL_RCC_OscConfig+0x74>
 8003096:	4b91      	ldr	r3, [pc, #580]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a90      	ldr	r2, [pc, #576]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e01d      	b.n	80030e0 <HAL_RCC_OscConfig+0xb0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x98>
 80030ae:	4b8b      	ldr	r3, [pc, #556]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a8a      	ldr	r2, [pc, #552]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a87      	ldr	r2, [pc, #540]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0xb0>
 80030c8:	4b84      	ldr	r3, [pc, #528]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a83      	ldr	r2, [pc, #524]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b81      	ldr	r3, [pc, #516]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a80      	ldr	r2, [pc, #512]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe f9c4 	bl	8001474 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe f9c0 	bl	8001474 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1fb      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe f9b0 	bl	8001474 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe f9ac 	bl	8001474 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1e7      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0xe8>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003146:	4b65      	ldr	r3, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003152:	4b62      	ldr	r3, [pc, #392]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11c      	bne.n	8003198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d116      	bne.n	8003198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	4b5c      	ldr	r3, [pc, #368]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_RCC_OscConfig+0x152>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1bb      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b56      	ldr	r3, [pc, #344]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4952      	ldr	r1, [pc, #328]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	e03a      	b.n	800320e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a0:	4b4f      	ldr	r3, [pc, #316]	; (80032e0 <HAL_RCC_OscConfig+0x2b0>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fe f965 	bl	8001474 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ae:	f7fe f961 	bl	8001474 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e19c      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b43      	ldr	r3, [pc, #268]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4940      	ldr	r1, [pc, #256]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e2:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <HAL_RCC_OscConfig+0x2b0>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe f944 	bl	8001474 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fe f940 	bl	8001474 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e17b      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d030      	beq.n	800327c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_RCC_OscConfig+0x2b4>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe f924 	bl	8001474 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe f920 	bl	8001474 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e15b      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x200>
 800324e:	e015      	b.n	800327c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_OscConfig+0x2b4>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003256:	f7fe f90d 	bl	8001474 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800325e:	f7fe f909 	bl	8001474 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e144      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f0      	bne.n	800325e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a0 	beq.w	80033ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10f      	bne.n	80032ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_OscConfig+0x2b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d121      	bne.n	800330a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_RCC_OscConfig+0x2b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_RCC_OscConfig+0x2b8>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d2:	f7fe f8cf 	bl	8001474 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	e011      	b.n	80032fe <HAL_RCC_OscConfig+0x2ce>
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470000 	.word	0x42470000
 80032e4:	42470e80 	.word	0x42470e80
 80032e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fe f8c2 	bl	8001474 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0fd      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b81      	ldr	r3, [pc, #516]	; (8003504 <HAL_RCC_OscConfig+0x4d4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x2f0>
 8003312:	4b7d      	ldr	r3, [pc, #500]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a7c      	ldr	r2, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
 800331e:	e01c      	b.n	800335a <HAL_RCC_OscConfig+0x32a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b05      	cmp	r3, #5
 8003326:	d10c      	bne.n	8003342 <HAL_RCC_OscConfig+0x312>
 8003328:	4b77      	ldr	r3, [pc, #476]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a76      	ldr	r2, [pc, #472]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	4b74      	ldr	r3, [pc, #464]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a73      	ldr	r2, [pc, #460]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	e00b      	b.n	800335a <HAL_RCC_OscConfig+0x32a>
 8003342:	4b71      	ldr	r3, [pc, #452]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a70      	ldr	r2, [pc, #448]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	4b6e      	ldr	r3, [pc, #440]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a6d      	ldr	r2, [pc, #436]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d015      	beq.n	800338e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fe f887 	bl	8001474 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fe f883 	bl	8001474 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0bc      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ee      	beq.n	800336a <HAL_RCC_OscConfig+0x33a>
 800338c:	e014      	b.n	80033b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338e:	f7fe f871 	bl	8001474 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003394:	e00a      	b.n	80033ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fe f86d 	bl	8001474 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e0a6      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	4b56      	ldr	r3, [pc, #344]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ee      	bne.n	8003396 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d105      	bne.n	80033ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033be:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 80033c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8092 	beq.w	80034f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033d4:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d05c      	beq.n	800349a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d141      	bne.n	800346c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b48      	ldr	r3, [pc, #288]	; (800350c <HAL_RCC_OscConfig+0x4dc>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7fe f841 	bl	8001474 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f6:	f7fe f83d 	bl	8001474 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e078      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003408:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	019b      	lsls	r3, r3, #6
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	3b01      	subs	r3, #1
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	061b      	lsls	r3, r3, #24
 8003438:	4933      	ldr	r1, [pc, #204]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343e:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_RCC_OscConfig+0x4dc>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe f816 	bl	8001474 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe f812 	bl	8001474 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04d      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x41c>
 800346a:	e045      	b.n	80034f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x4dc>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fd ffff 	bl	8001474 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fd fffb 	bl	8001474 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e036      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348c:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x44a>
 8003498:	e02e      	b.n	80034f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e029      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_RCC_OscConfig+0x4d8>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d115      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ce:	4013      	ands	r3, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d10d      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40007000 	.word	0x40007000
 8003508:	40023800 	.word	0x40023800
 800350c:	42470060 	.word	0x42470060

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0cc      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b68      	ldr	r3, [pc, #416]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d90c      	bls.n	800354c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800356e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d044      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d119      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3b      	ldr	r3, [pc, #236]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e067      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4934      	ldr	r1, [pc, #208]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fd ff38 	bl	8001474 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fd ff34 	bl	8001474 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d20c      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f821 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fe98 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08007b5c 	.word	0x08007b5c
 80036d4:	20000014 	.word	0x20000014
 80036d8:	20000018 	.word	0x20000018

080036dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	2300      	movs	r3, #0
 80036ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f4:	4b67      	ldr	r3, [pc, #412]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d00d      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x40>
 8003700:	2b08      	cmp	r3, #8
 8003702:	f200 80bd 	bhi.w	8003880 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x34>
 800370a:	2b04      	cmp	r3, #4
 800370c:	d003      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x3a>
 800370e:	e0b7      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003712:	60bb      	str	r3, [r7, #8]
       break;
 8003714:	e0b7      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003716:	4b61      	ldr	r3, [pc, #388]	; (800389c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003718:	60bb      	str	r3, [r7, #8]
      break;
 800371a:	e0b4      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800371c:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003726:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04d      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b58      	ldr	r3, [pc, #352]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	461a      	mov	r2, r3
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	ea02 0800 	and.w	r8, r2, r0
 800374a:	ea03 0901 	and.w	r9, r3, r1
 800374e:	4640      	mov	r0, r8
 8003750:	4649      	mov	r1, r9
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	014b      	lsls	r3, r1, #5
 800375c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003760:	0142      	lsls	r2, r0, #5
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	ebb0 0008 	subs.w	r0, r0, r8
 800376a:	eb61 0109 	sbc.w	r1, r1, r9
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	018b      	lsls	r3, r1, #6
 8003778:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800377c:	0182      	lsls	r2, r0, #6
 800377e:	1a12      	subs	r2, r2, r0
 8003780:	eb63 0301 	sbc.w	r3, r3, r1
 8003784:	f04f 0000 	mov.w	r0, #0
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	00d9      	lsls	r1, r3, #3
 800378e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003792:	00d0      	lsls	r0, r2, #3
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	eb12 0208 	adds.w	r2, r2, r8
 800379c:	eb43 0309 	adc.w	r3, r3, r9
 80037a0:	f04f 0000 	mov.w	r0, #0
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	0259      	lsls	r1, r3, #9
 80037aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037ae:	0250      	lsls	r0, r2, #9
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	f7fc fd56 	bl	8000270 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e04a      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	461a      	mov	r2, r3
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	ea02 0400 	and.w	r4, r2, r0
 80037e6:	ea03 0501 	and.w	r5, r3, r1
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	014b      	lsls	r3, r1, #5
 80037f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037fc:	0142      	lsls	r2, r0, #5
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	1b00      	subs	r0, r0, r4
 8003804:	eb61 0105 	sbc.w	r1, r1, r5
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	018b      	lsls	r3, r1, #6
 8003812:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003816:	0182      	lsls	r2, r0, #6
 8003818:	1a12      	subs	r2, r2, r0
 800381a:	eb63 0301 	sbc.w	r3, r3, r1
 800381e:	f04f 0000 	mov.w	r0, #0
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	00d9      	lsls	r1, r3, #3
 8003828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800382c:	00d0      	lsls	r0, r2, #3
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	1912      	adds	r2, r2, r4
 8003834:	eb45 0303 	adc.w	r3, r5, r3
 8003838:	f04f 0000 	mov.w	r0, #0
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	0299      	lsls	r1, r3, #10
 8003842:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003846:	0290      	lsls	r0, r2, #10
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	461a      	mov	r2, r3
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	f7fc fd0a 	bl	8000270 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	3301      	adds	r3, #1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	60bb      	str	r3, [r7, #8]
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003882:	60bb      	str	r3, [r7, #8]
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	68bb      	ldr	r3, [r7, #8]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	00f42400 	.word	0x00f42400
 800389c:	007a1200 	.word	0x007a1200

080038a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000014 	.word	0x20000014

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038bc:	f7ff fff0 	bl	80038a0 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0a9b      	lsrs	r3, r3, #10
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08007b6c 	.word	0x08007b6c

080038e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038e0:	b084      	sub	sp, #16
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	f107 001c 	add.w	r0, r7, #28
 80038ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d122      	bne.n	800393e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800390c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003922:	2b01      	cmp	r3, #1
 8003924:	d105      	bne.n	8003932 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f001 fac6 	bl	8004ec4 <USB_CoreReset>
 8003938:	4603      	mov	r3, r0
 800393a:	73fb      	strb	r3, [r7, #15]
 800393c:	e01a      	b.n	8003974 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f001 faba 	bl	8004ec4 <USB_CoreReset>
 8003950:	4603      	mov	r3, r0
 8003952:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
 8003966:	e005      	b.n	8003974 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10b      	bne.n	8003992 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f043 0206 	orr.w	r2, r3, #6
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800399e:	b004      	add	sp, #16
 80039a0:	4770      	bx	lr
	...

080039a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d165      	bne.n	8003a84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4a41      	ldr	r2, [pc, #260]	; (8003ac0 <USB_SetTurnaroundTime+0x11c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d906      	bls.n	80039ce <USB_SetTurnaroundTime+0x2a>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4a40      	ldr	r2, [pc, #256]	; (8003ac4 <USB_SetTurnaroundTime+0x120>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d202      	bcs.n	80039ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80039c8:	230f      	movs	r3, #15
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e062      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <USB_SetTurnaroundTime+0x120>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d306      	bcc.n	80039e4 <USB_SetTurnaroundTime+0x40>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4a3b      	ldr	r2, [pc, #236]	; (8003ac8 <USB_SetTurnaroundTime+0x124>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d202      	bcs.n	80039e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80039de:	230e      	movs	r3, #14
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e057      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4a38      	ldr	r2, [pc, #224]	; (8003ac8 <USB_SetTurnaroundTime+0x124>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d306      	bcc.n	80039fa <USB_SetTurnaroundTime+0x56>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4a37      	ldr	r2, [pc, #220]	; (8003acc <USB_SetTurnaroundTime+0x128>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d202      	bcs.n	80039fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80039f4:	230d      	movs	r3, #13
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e04c      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4a33      	ldr	r2, [pc, #204]	; (8003acc <USB_SetTurnaroundTime+0x128>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d306      	bcc.n	8003a10 <USB_SetTurnaroundTime+0x6c>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4a32      	ldr	r2, [pc, #200]	; (8003ad0 <USB_SetTurnaroundTime+0x12c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d802      	bhi.n	8003a10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e041      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <USB_SetTurnaroundTime+0x12c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d906      	bls.n	8003a26 <USB_SetTurnaroundTime+0x82>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4a2e      	ldr	r2, [pc, #184]	; (8003ad4 <USB_SetTurnaroundTime+0x130>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d802      	bhi.n	8003a26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a20:	230b      	movs	r3, #11
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e036      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4a2a      	ldr	r2, [pc, #168]	; (8003ad4 <USB_SetTurnaroundTime+0x130>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d906      	bls.n	8003a3c <USB_SetTurnaroundTime+0x98>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4a29      	ldr	r2, [pc, #164]	; (8003ad8 <USB_SetTurnaroundTime+0x134>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d802      	bhi.n	8003a3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003a36:	230a      	movs	r3, #10
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e02b      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <USB_SetTurnaroundTime+0x134>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d906      	bls.n	8003a52 <USB_SetTurnaroundTime+0xae>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4a25      	ldr	r2, [pc, #148]	; (8003adc <USB_SetTurnaroundTime+0x138>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d202      	bcs.n	8003a52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a4c:	2309      	movs	r3, #9
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e020      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <USB_SetTurnaroundTime+0x138>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d306      	bcc.n	8003a68 <USB_SetTurnaroundTime+0xc4>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <USB_SetTurnaroundTime+0x13c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d802      	bhi.n	8003a68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a62:	2308      	movs	r3, #8
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e015      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <USB_SetTurnaroundTime+0x13c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d906      	bls.n	8003a7e <USB_SetTurnaroundTime+0xda>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <USB_SetTurnaroundTime+0x140>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d202      	bcs.n	8003a7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a78:	2307      	movs	r3, #7
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e00a      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a7e:	2306      	movs	r3, #6
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e007      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a8a:	2309      	movs	r3, #9
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e001      	b.n	8003a94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a90:	2309      	movs	r3, #9
 8003a92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	029b      	lsls	r3, r3, #10
 8003aa8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	00d8acbf 	.word	0x00d8acbf
 8003ac4:	00e4e1c0 	.word	0x00e4e1c0
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	01067380 	.word	0x01067380
 8003ad0:	011a499f 	.word	0x011a499f
 8003ad4:	01312cff 	.word	0x01312cff
 8003ad8:	014ca43f 	.word	0x014ca43f
 8003adc:	016e3600 	.word	0x016e3600
 8003ae0:	01a6ab1f 	.word	0x01a6ab1f
 8003ae4:	01e84800 	.word	0x01e84800

08003ae8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d106      	bne.n	8003b58 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	e00b      	b.n	8003b70 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	e001      	b.n	8003b70 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e003      	b.n	8003b78 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003b70:	2032      	movs	r0, #50	; 0x32
 8003b72:	f7fd fc8b 	bl	800148c <HAL_Delay>

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b80:	b084      	sub	sp, #16
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	e009      	b.n	8003bb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	3340      	adds	r3, #64	; 0x40
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b0e      	cmp	r3, #14
 8003bb8:	d9f2      	bls.n	8003ba0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d11c      	bne.n	8003bfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bce:	f043 0302 	orr.w	r3, r3, #2
 8003bd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8003bf8:	e00b      	b.n	8003c12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	4619      	mov	r1, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	680b      	ldr	r3, [r1, #0]
 8003c30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d10c      	bne.n	8003c52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c3e:	2100      	movs	r1, #0
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f949 	bl	8003ed8 <USB_SetDevSpeed>
 8003c46:	e008      	b.n	8003c5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c48:	2101      	movs	r1, #1
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f944 	bl	8003ed8 <USB_SetDevSpeed>
 8003c50:	e003      	b.n	8003c5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c52:	2103      	movs	r1, #3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f93f 	bl	8003ed8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c5a:	2110      	movs	r1, #16
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8f3 	bl	8003e48 <USB_FlushTxFifo>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f911 	bl	8003e94 <USB_FlushRxFifo>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	461a      	mov	r2, r3
 8003c84:	2300      	movs	r3, #0
 8003c86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	e043      	b.n	8003d2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cbc:	d118      	bne.n	8003cf0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e013      	b.n	8003d02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e008      	b.n	8003d02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2300      	movs	r3, #0
 8003d12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	461a      	mov	r2, r3
 8003d22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d3b7      	bcc.n	8003ca6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	e043      	b.n	8003dc4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d52:	d118      	bne.n	8003d86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d66:	461a      	mov	r2, r3
 8003d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e013      	b.n	8003d98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	e008      	b.n	8003d98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d92:	461a      	mov	r2, r3
 8003d94:	2300      	movs	r3, #0
 8003d96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da4:	461a      	mov	r2, r3
 8003da6:	2300      	movs	r3, #0
 8003da8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	461a      	mov	r2, r3
 8003db8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d3b7      	bcc.n	8003d3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003dec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f043 0210 	orr.w	r2, r3, #16
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <USB_DevInit+0x2c4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f043 0208 	orr.w	r2, r3, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e40:	b004      	add	sp, #16
 8003e42:	4770      	bx	lr
 8003e44:	803c3800 	.word	0x803c3800

08003e48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3301      	adds	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <USB_FlushTxFifo+0x48>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e006      	b.n	8003e82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d0f0      	beq.n	8003e62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	00030d40 	.word	0x00030d40

08003e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <USB_FlushRxFifo+0x40>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e006      	b.n	8003ec6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d0f0      	beq.n	8003ea6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	00030d40 	.word	0x00030d40

08003ed8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b087      	sub	sp, #28
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0306 	and.w	r3, r3, #6
 8003f22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]
 8003f2e:	e00a      	b.n	8003f46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d002      	beq.n	8003f3c <USB_GetDevSpeed+0x32>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b06      	cmp	r3, #6
 8003f3a:	d102      	bne.n	8003f42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	75fb      	strb	r3, [r7, #23]
 8003f40:	e001      	b.n	8003f46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f42:	230f      	movs	r3, #15
 8003f44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d13a      	bne.n	8003fe6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d155      	bne.n	8004054 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	78db      	ldrb	r3, [r3, #3]
 8003fc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	059b      	lsls	r3, r3, #22
 8003fca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e036      	b.n	8004054 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004004:	4313      	orrs	r3, r2
 8004006:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11a      	bne.n	8004054 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	78db      	ldrb	r3, [r3, #3]
 8004038:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800403a:	430b      	orrs	r3, r1
 800403c:	4313      	orrs	r3, r2
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004052:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d161      	bne.n	8004144 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004096:	d11f      	bne.n	80040d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040f8:	4013      	ands	r3, r2
 80040fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	68f9      	ldr	r1, [r7, #12]
 8004118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800411c:	4013      	ands	r3, r2
 800411e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	0159      	lsls	r1, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	440b      	add	r3, r1
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	4619      	mov	r1, r3
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <USB_DeactivateEndpoint+0x1b0>)
 800413e:	4013      	ands	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
 8004142:	e060      	b.n	8004206 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415a:	d11f      	bne.n	800419c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	440a      	add	r2, r1
 8004172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800417a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	440a      	add	r2, r1
 8004192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800419a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	43db      	mvns	r3, r3
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041bc:	4013      	ands	r3, r2
 80041be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	43db      	mvns	r3, r3
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e0:	4013      	ands	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	0159      	lsls	r1, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	440b      	add	r3, r1
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	4619      	mov	r1, r3
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <USB_DeactivateEndpoint+0x1b4>)
 8004202:	4013      	ands	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	ec337800 	.word	0xec337800
 8004218:	eff37800 	.word	0xeff37800

0800421c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	2b01      	cmp	r3, #1
 800423a:	f040 815c 	bne.w	80044f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d132      	bne.n	80042ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	440a      	add	r2, r1
 8004280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	0cdb      	lsrs	r3, r3, #19
 80042a6:	04db      	lsls	r3, r3, #19
 80042a8:	6113      	str	r3, [r2, #16]
 80042aa:	e074      	b.n	8004396 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c6:	0cdb      	lsrs	r3, r3, #19
 80042c8:	04db      	lsls	r3, r3, #19
 80042ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6959      	ldr	r1, [r3, #20]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	440b      	add	r3, r1
 8004308:	1e59      	subs	r1, r3, #1
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004312:	04d9      	lsls	r1, r3, #19
 8004314:	4b9d      	ldr	r3, [pc, #628]	; (800458c <USB_EPStartXfer+0x370>)
 8004316:	400b      	ands	r3, r1
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	0148      	lsls	r0, r1, #5
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	4401      	add	r1, r0
 8004320:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433e:	69b9      	ldr	r1, [r7, #24]
 8004340:	0148      	lsls	r0, r1, #5
 8004342:	69f9      	ldr	r1, [r7, #28]
 8004344:	4401      	add	r1, r0
 8004346:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800434a:	4313      	orrs	r3, r2
 800434c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	78db      	ldrb	r3, [r3, #3]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d11f      	bne.n	8004396 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004370:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004374:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004394:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d14b      	bne.n	8004434 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d009      	beq.n	80043b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	78db      	ldrb	r3, [r3, #3]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d128      	bne.n	8004412 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d110      	bne.n	80043f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e00f      	b.n	8004412 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004410:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e12f      	b.n	8004694 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	0151      	lsls	r1, r2, #5
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	440a      	add	r2, r1
 800444a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004452:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	78db      	ldrb	r3, [r3, #3]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d015      	beq.n	8004488 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8117 	beq.w	8004694 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004482:	4313      	orrs	r3, r2
 8004484:	634b      	str	r3, [r1, #52]	; 0x34
 8004486:	e105      	b.n	8004694 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d110      	bne.n	80044ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e00f      	b.n	80044da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	68d9      	ldr	r1, [r3, #12]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	b298      	uxth	r0, r3
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4603      	mov	r3, r0
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fa2b 	bl	800494a <USB_WritePacket>
 80044f4:	e0ce      	b.n	8004694 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	0151      	lsls	r1, r2, #5
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	440a      	add	r2, r1
 800450c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004510:	0cdb      	lsrs	r3, r3, #19
 8004512:	04db      	lsls	r3, r3, #19
 8004514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004538:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d126      	bne.n	8004590 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	0148      	lsls	r0, r1, #5
 800455c:	69f9      	ldr	r1, [r7, #28]
 800455e:	4401      	add	r1, r0
 8004560:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004564:	4313      	orrs	r3, r2
 8004566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004586:	6113      	str	r3, [r2, #16]
 8004588:	e036      	b.n	80045f8 <USB_EPStartXfer+0x3dc>
 800458a:	bf00      	nop
 800458c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4413      	add	r3, r2
 800459a:	1e5a      	subs	r2, r3, #1
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	8afb      	ldrh	r3, [r7, #22]
 80045b6:	04d9      	lsls	r1, r3, #19
 80045b8:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <USB_EPStartXfer+0x484>)
 80045ba:	400b      	ands	r3, r1
 80045bc:	69b9      	ldr	r1, [r7, #24]
 80045be:	0148      	lsls	r0, r1, #5
 80045c0:	69f9      	ldr	r1, [r7, #28]
 80045c2:	4401      	add	r1, r0
 80045c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045c8:	4313      	orrs	r3, r2
 80045ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	8af9      	ldrh	r1, [r7, #22]
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	69b9      	ldr	r1, [r7, #24]
 80045ea:	0148      	lsls	r0, r1, #5
 80045ec:	69f9      	ldr	r1, [r7, #28]
 80045ee:	4401      	add	r1, r0
 80045f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045f4:	4313      	orrs	r3, r2
 80045f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d10d      	bne.n	800461a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	68d9      	ldr	r1, [r3, #12]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	460a      	mov	r2, r1
 8004618:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	78db      	ldrb	r3, [r3, #3]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d128      	bne.n	8004674 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d110      	bne.n	8004654 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e00f      	b.n	8004674 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004672:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	1ff80000 	.word	0x1ff80000

080046a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	785b      	ldrb	r3, [r3, #1]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	f040 80cd 	bne.w	8004860 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d132      	bne.n	8004734 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472c:	0cdb      	lsrs	r3, r3, #19
 800472e:	04db      	lsls	r3, r3, #19
 8004730:	6113      	str	r3, [r2, #16]
 8004732:	e04e      	b.n	80047d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474e:	0cdb      	lsrs	r3, r3, #19
 8004750:	04db      	lsls	r3, r3, #19
 8004752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004776:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	429a      	cmp	r2, r3
 8004782:	d903      	bls.n	800478c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c2:	6939      	ldr	r1, [r7, #16]
 80047c4:	0148      	lsls	r0, r1, #5
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	4401      	add	r1, r0
 80047ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047ce:	4313      	orrs	r3, r2
 80047d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d11e      	bne.n	8004816 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	461a      	mov	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800480e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	e092      	b.n	800493c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004834:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d07e      	beq.n	800493c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	2101      	movs	r1, #1
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	6979      	ldr	r1, [r7, #20]
 8004856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485a:	4313      	orrs	r3, r2
 800485c:	634b      	str	r3, [r1, #52]	; 0x34
 800485e:	e06d      	b.n	800493c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	0151      	lsls	r1, r2, #5
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	440a      	add	r2, r1
 8004876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800487a:	0cdb      	lsrs	r3, r3, #19
 800487c:	04db      	lsls	r3, r3, #19
 800487e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800489e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ea:	6939      	ldr	r1, [r7, #16]
 80048ec:	0148      	lsls	r0, r1, #5
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	4401      	add	r1, r0
 80048f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048f6:	4313      	orrs	r3, r2
 80048f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10d      	bne.n	800491c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68d9      	ldr	r1, [r3, #12]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	460a      	mov	r2, r1
 800491a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800493a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800494a:	b480      	push	{r7}
 800494c:	b089      	sub	sp, #36	; 0x24
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	4611      	mov	r1, r2
 8004956:	461a      	mov	r2, r3
 8004958:	460b      	mov	r3, r1
 800495a:	71fb      	strb	r3, [r7, #7]
 800495c:	4613      	mov	r3, r2
 800495e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004968:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d11a      	bne.n	80049a6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004970:	88bb      	ldrh	r3, [r7, #4]
 8004972:	3303      	adds	r3, #3
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e00f      	b.n	800499e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	031a      	lsls	r2, r3, #12
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	4413      	add	r3, r2
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	461a      	mov	r2, r3
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3304      	adds	r3, #4
 8004996:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	3301      	adds	r3, #1
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d3eb      	bcc.n	800497e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3724      	adds	r7, #36	; 0x24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	3303      	adds	r3, #3
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e00b      	b.n	80049f0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	3304      	adds	r3, #4
 80049e8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	3301      	adds	r3, #1
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d3ef      	bcc.n	80049d8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80049f8:	69fb      	ldr	r3, [r7, #28]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3724      	adds	r7, #36	; 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	785b      	ldrb	r3, [r3, #1]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d12c      	bne.n	8004a7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db12      	blt.n	8004a5a <USB_EPSetStall+0x54>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00f      	beq.n	8004a5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e02b      	b.n	8004ad4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	db12      	blt.n	8004ab4 <USB_EPSetStall+0xae>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00f      	beq.n	8004ab4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d128      	bne.n	8004b50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	78db      	ldrb	r3, [r3, #3]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d003      	beq.n	8004b2e <USB_EPClearStall+0x4c>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	78db      	ldrb	r3, [r3, #3]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d138      	bne.n	8004ba0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e027      	b.n	8004ba0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	78db      	ldrb	r3, [r3, #3]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d003      	beq.n	8004b80 <USB_EPClearStall+0x9e>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d10f      	bne.n	8004ba0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bd0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be8:	4313      	orrs	r3, r2
 8004bea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c14:	f023 0303 	bic.w	r3, r3, #3
 8004c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c28:	f023 0302 	bic.w	r3, r3, #2
 8004c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c6a:	f043 0302 	orr.w	r3, r3, #2
 8004c6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4013      	ands	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	0c1b      	lsrs	r3, r3, #16
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	b29b      	uxth	r3, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
 8004d78:	01db      	lsls	r3, r3, #7
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4013      	ands	r3, r2
 8004d94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d96:	68bb      	ldr	r3, [r7, #8]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f003 0301 	and.w	r3, r3, #1
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	460b      	mov	r3, r1
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	333c      	adds	r3, #60	; 0x3c
 8004e1e:	3304      	adds	r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <USB_EP0_OutStart+0xb8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d90a      	bls.n	8004e42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3c:	d101      	bne.n	8004e42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e037      	b.n	8004eb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e70:	f043 0318 	orr.w	r3, r3, #24
 8004e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e8a:	7afb      	ldrb	r3, [r7, #11]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d10f      	bne.n	8004eb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004eae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	4f54300a 	.word	0x4f54300a

08004ec4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <USB_CoreReset+0x64>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e01b      	b.n	8004f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	daf2      	bge.n	8004ed0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3301      	adds	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <USB_CoreReset+0x64>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e006      	b.n	8004f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d0f0      	beq.n	8004efa <USB_CoreReset+0x36>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	00030d40 	.word	0x00030d40

08004f2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f3c:	f002 f946 	bl	80071cc <malloc>
 8004f40:	4603      	mov	r3, r0
 8004f42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d105      	bne.n	8004f56 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004f52:	2302      	movs	r3, #2
 8004f54:	e066      	b.n	8005024 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7c1b      	ldrb	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d119      	bne.n	8004f9a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	2181      	movs	r1, #129	; 0x81
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 ffb3 	bl	8006eda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f7e:	2202      	movs	r2, #2
 8004f80:	2101      	movs	r1, #1
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 ffa9 	bl	8006eda <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2210      	movs	r2, #16
 8004f94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004f98:	e016      	b.n	8004fc8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	2181      	movs	r1, #129	; 0x81
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f001 ff9a 	bl	8006eda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fac:	2340      	movs	r3, #64	; 0x40
 8004fae:	2202      	movs	r2, #2
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 ff91 	bl	8006eda <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2210      	movs	r2, #16
 8004fc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004fc8:	2308      	movs	r3, #8
 8004fca:	2203      	movs	r2, #3
 8004fcc:	2182      	movs	r1, #130	; 0x82
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f001 ff83 	bl	8006eda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	7c1b      	ldrb	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005008:	2101      	movs	r1, #1
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f002 f854 	bl	80070b8 <USBD_LL_PrepareReceive>
 8005010:	e007      	b.n	8005022 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	2101      	movs	r1, #1
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f002 f84b 	bl	80070b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800503c:	2181      	movs	r1, #129	; 0x81
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 ff71 	bl	8006f26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800504a:	2101      	movs	r1, #1
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 ff6a 	bl	8006f26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800505a:	2182      	movs	r1, #130	; 0x82
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f001 ff62 	bl	8006f26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00e      	beq.n	800509a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800508c:	4618      	mov	r0, r3
 800508e:	f002 f8a5 	bl	80071dc <free>
    pdev->pClassData = NULL;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d03a      	beq.n	8005144 <USBD_CDC_Setup+0xa0>
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	f040 8097 	bne.w	8005202 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	88db      	ldrh	r3, [r3, #6]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d029      	beq.n	8005130 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b25b      	sxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	da11      	bge.n	800510a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80050f2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	88d2      	ldrh	r2, [r2, #6]
 80050f8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80050fa:	6939      	ldr	r1, [r7, #16]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	88db      	ldrh	r3, [r3, #6]
 8005100:	461a      	mov	r2, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 faac 	bl	8006660 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005108:	e082      	b.n	8005210 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	785a      	ldrb	r2, [r3, #1]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	88db      	ldrh	r3, [r3, #6]
 8005118:	b2da      	uxtb	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005120:	6939      	ldr	r1, [r7, #16]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	88db      	ldrh	r3, [r3, #6]
 8005126:	461a      	mov	r2, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f001 fac5 	bl	80066b8 <USBD_CtlPrepareRx>
    break;
 800512e:	e06f      	b.n	8005210 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	7850      	ldrb	r0, [r2, #1]
 800513c:	2200      	movs	r2, #0
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	4798      	blx	r3
    break;
 8005142:	e065      	b.n	8005210 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b0b      	cmp	r3, #11
 800514a:	d84f      	bhi.n	80051ec <USBD_CDC_Setup+0x148>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <USBD_CDC_Setup+0xb0>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005185 	.word	0x08005185
 8005158:	080051fb 	.word	0x080051fb
 800515c:	080051ed 	.word	0x080051ed
 8005160:	080051ed 	.word	0x080051ed
 8005164:	080051ed 	.word	0x080051ed
 8005168:	080051ed 	.word	0x080051ed
 800516c:	080051ed 	.word	0x080051ed
 8005170:	080051ed 	.word	0x080051ed
 8005174:	080051ed 	.word	0x080051ed
 8005178:	080051ed 	.word	0x080051ed
 800517c:	080051ad 	.word	0x080051ad
 8005180:	080051d5 	.word	0x080051d5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800518a:	2b03      	cmp	r3, #3
 800518c:	d107      	bne.n	800519e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800518e:	f107 030c 	add.w	r3, r7, #12
 8005192:	2202      	movs	r2, #2
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f001 fa62 	bl	8006660 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800519c:	e030      	b.n	8005200 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f001 f9ec 	bl	800657e <USBD_CtlError>
        ret = USBD_FAIL;
 80051a6:	2303      	movs	r3, #3
 80051a8:	75fb      	strb	r3, [r7, #23]
      break;
 80051aa:	e029      	b.n	8005200 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d107      	bne.n	80051c6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80051b6:	f107 030f 	add.w	r3, r7, #15
 80051ba:	2201      	movs	r2, #1
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 fa4e 	bl	8006660 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80051c4:	e01c      	b.n	8005200 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f001 f9d8 	bl	800657e <USBD_CtlError>
        ret = USBD_FAIL;
 80051ce:	2303      	movs	r3, #3
 80051d0:	75fb      	strb	r3, [r7, #23]
      break;
 80051d2:	e015      	b.n	8005200 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d00f      	beq.n	80051fe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 f9cc 	bl	800657e <USBD_CtlError>
        ret = USBD_FAIL;
 80051e6:	2303      	movs	r3, #3
 80051e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80051ea:	e008      	b.n	80051fe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 f9c5 	bl	800657e <USBD_CtlError>
      ret = USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	75fb      	strb	r3, [r7, #23]
      break;
 80051f8:	e002      	b.n	8005200 <USBD_CDC_Setup+0x15c>
      break;
 80051fa:	bf00      	nop
 80051fc:	e008      	b.n	8005210 <USBD_CDC_Setup+0x16c>
      break;
 80051fe:	bf00      	nop
    }
    break;
 8005200:	e006      	b.n	8005210 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005202:	6839      	ldr	r1, [r7, #0]
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f001 f9ba 	bl	800657e <USBD_CtlError>
    ret = USBD_FAIL;
 800520a:	2303      	movs	r3, #3
 800520c:	75fb      	strb	r3, [r7, #23]
    break;
 800520e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop

0800521c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800522e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800523a:	2303      	movs	r3, #3
 800523c:	e049      	b.n	80052d2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005244:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	3318      	adds	r3, #24
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d029      	beq.n	80052b0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	3318      	adds	r3, #24
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	78f9      	ldrb	r1, [r7, #3]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	460b      	mov	r3, r1
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	1a5b      	subs	r3, r3, r1
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4403      	add	r3, r0
 800527c:	3344      	adds	r3, #68	; 0x44
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	fbb2 f1f3 	udiv	r1, r2, r3
 8005284:	fb03 f301 	mul.w	r3, r3, r1
 8005288:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800528a:	2b00      	cmp	r3, #0
 800528c:	d110      	bne.n	80052b0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	3318      	adds	r3, #24
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80052a2:	78f9      	ldrb	r1, [r7, #3]
 80052a4:	2300      	movs	r3, #0
 80052a6:	2200      	movs	r2, #0
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 fee4 	bl	8007076 <USBD_LL_Transmit>
 80052ae:	e00f      	b.n	80052d0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e015      	b.n	8005328 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 fefa 	bl	80070fa <USBD_LL_GetRxDataSize>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005322:	4611      	mov	r1, r2
 8005324:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800533e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d015      	beq.n	8005376 <USBD_CDC_EP0_RxReady+0x46>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005350:	2bff      	cmp	r3, #255	; 0xff
 8005352:	d010      	beq.n	8005376 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005362:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800536a:	b292      	uxth	r2, r2
 800536c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	22ff      	movs	r2, #255	; 0xff
 8005372:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2243      	movs	r2, #67	; 0x43
 800538c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800538e:	4b03      	ldr	r3, [pc, #12]	; (800539c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	200000a8 	.word	0x200000a8

080053a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2243      	movs	r2, #67	; 0x43
 80053ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80053ae:	4b03      	ldr	r3, [pc, #12]	; (80053bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20000064 	.word	0x20000064

080053c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2243      	movs	r2, #67	; 0x43
 80053cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80053ce:	4b03      	ldr	r3, [pc, #12]	; (80053dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	200000ec 	.word	0x200000ec

080053e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	220a      	movs	r2, #10
 80053ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053ee:	4b03      	ldr	r3, [pc, #12]	; (80053fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20000020 	.word	0x20000020

08005400 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005410:	2303      	movs	r3, #3
 8005412:	e004      	b.n	800541e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800542a:	b480      	push	{r7}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800543c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800546c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005492:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e01a      	b.n	80054dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d114      	bne.n	80054da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80054ce:	2181      	movs	r1, #129	; 0x81
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 fdd0 	bl	8007076 <USBD_LL_Transmit>

    ret = USBD_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80054fe:	2303      	movs	r3, #3
 8005500:	e016      	b.n	8005530 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	7c1b      	ldrb	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005514:	2101      	movs	r1, #1
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 fdce 	bl	80070b8 <USBD_LL_PrepareReceive>
 800551c:	e007      	b.n	800552e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005524:	2340      	movs	r3, #64	; 0x40
 8005526:	2101      	movs	r1, #1
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 fdc5 	bl	80070b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800554c:	2303      	movs	r3, #3
 800554e:	e025      	b.n	800559c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	79fa      	ldrb	r2, [r7, #7]
 800558e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f001 fc3b 	bl	8006e0c <USBD_LL_Init>
 8005596:	4603      	mov	r3, r0
 8005598:	75fb      	strb	r3, [r7, #23]

  return ret;
 800559a:	7dfb      	ldrb	r3, [r7, #23]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e010      	b.n	80055de <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	f107 020e 	add.w	r2, r7, #14
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
 80055d4:	4602      	mov	r2, r0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 fc58 	bl	8006ea4 <USBD_LL_Start>
 80055f4:	4603      	mov	r3, r0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005620:	2303      	movs	r3, #3
 8005622:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	4611      	mov	r1, r2
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
 800563e:	4603      	mov	r3, r0
 8005640:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	4611      	mov	r1, r2
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
  }

  return USBD_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 ff3b 	bl	800650a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056a2:	461a      	mov	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d01a      	beq.n	80056ee <USBD_LL_SetupStage+0x72>
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d822      	bhi.n	8005702 <USBD_LL_SetupStage+0x86>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <USBD_LL_SetupStage+0x4a>
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d00a      	beq.n	80056da <USBD_LL_SetupStage+0x5e>
 80056c4:	e01d      	b.n	8005702 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa18 	bl	8005b04 <USBD_StdDevReq>
 80056d4:	4603      	mov	r3, r0
 80056d6:	73fb      	strb	r3, [r7, #15]
      break;
 80056d8:	e020      	b.n	800571c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa7c 	bl	8005be0 <USBD_StdItfReq>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e016      	b.n	800571c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 faba 	bl	8005c70 <USBD_StdEPReq>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005700:	e00c      	b.n	800571c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005708:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800570c:	b2db      	uxtb	r3, r3
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 fc27 	bl	8006f64 <USBD_LL_StallEP>
 8005716:	4603      	mov	r3, r0
 8005718:	73fb      	strb	r3, [r7, #15]
      break;
 800571a:	bf00      	nop
  }

  return ret;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	460b      	mov	r3, r1
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005734:	7afb      	ldrb	r3, [r7, #11]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d137      	bne.n	80057aa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005740:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005748:	2b03      	cmp	r3, #3
 800574a:	d14a      	bne.n	80057e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	429a      	cmp	r2, r3
 8005756:	d913      	bls.n	8005780 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	1ad2      	subs	r2, r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	4293      	cmp	r3, r2
 8005770:	bf28      	it	cs
 8005772:	4613      	movcs	r3, r2
 8005774:	461a      	mov	r2, r3
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 ffba 	bl	80066f2 <USBD_CtlContinueRx>
 800577e:	e030      	b.n	80057e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005792:	2b03      	cmp	r3, #3
 8005794:	d105      	bne.n	80057a2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 ffb6 	bl	8006714 <USBD_CtlSendStatus>
 80057a8:	e01b      	b.n	80057e2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d10e      	bne.n	80057de <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	7afa      	ldrb	r2, [r7, #11]
 80057ca:	4611      	mov	r1, r2
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	4798      	blx	r3
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	e002      	b.n	80057e4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80057de:	2303      	movs	r3, #3
 80057e0:	e000      	b.n	80057e4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	460b      	mov	r3, r1
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d16a      	bne.n	80058d6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3314      	adds	r3, #20
 8005804:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800580c:	2b02      	cmp	r3, #2
 800580e:	d155      	bne.n	80058bc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	429a      	cmp	r2, r3
 800581a:	d914      	bls.n	8005846 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	1ad2      	subs	r2, r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	461a      	mov	r2, r3
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 ff2f 	bl	8006696 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005838:	2300      	movs	r3, #0
 800583a:	2200      	movs	r2, #0
 800583c:	2100      	movs	r1, #0
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f001 fc3a 	bl	80070b8 <USBD_LL_PrepareReceive>
 8005844:	e03a      	b.n	80058bc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	d11c      	bne.n	800588c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800585a:	429a      	cmp	r2, r3
 800585c:	d316      	bcc.n	800588c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005868:	429a      	cmp	r2, r3
 800586a:	d20f      	bcs.n	800588c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800586c:	2200      	movs	r2, #0
 800586e:	2100      	movs	r1, #0
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 ff10 	bl	8006696 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800587e:	2300      	movs	r3, #0
 8005880:	2200      	movs	r2, #0
 8005882:	2100      	movs	r1, #0
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f001 fc17 	bl	80070b8 <USBD_LL_PrepareReceive>
 800588a:	e017      	b.n	80058bc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d105      	bne.n	80058ae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f001 fb57 	bl	8006f64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 ff3f 	bl	800673a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d123      	bne.n	800590e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f7ff fe99 	bl	80055fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058d4:	e01b      	b.n	800590e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d013      	beq.n	800590a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d10e      	bne.n	800590a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	7afa      	ldrb	r2, [r7, #11]
 80058f6:	4611      	mov	r1, r2
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	4798      	blx	r3
 80058fc:	4603      	mov	r3, r0
 80058fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	e002      	b.n	8005910 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800590a:	2303      	movs	r3, #3
 800590c:	e000      	b.n	8005910 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6852      	ldr	r2, [r2, #4]
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	4611      	mov	r1, r2
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	2200      	movs	r2, #0
 8005960:	2100      	movs	r1, #0
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fab9 	bl	8006eda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2240      	movs	r2, #64	; 0x40
 8005974:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	2200      	movs	r2, #0
 800597c:	2180      	movs	r1, #128	; 0x80
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 faab 	bl	8006eda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2204      	movs	r2, #4
 80059d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d105      	bne.n	8005a02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d10b      	bne.n	8005a3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	460b      	mov	r3, r1
 8005a68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6852      	ldr	r2, [r2, #4]
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
  }

  return USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	3301      	adds	r3, #1
 8005adc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ae4:	8a3b      	ldrh	r3, [r7, #16]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	b21a      	sxth	r2, r3
 8005aea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	b21b      	sxth	r3, r3
 8005af2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005af4:	89fb      	ldrh	r3, [r7, #14]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d005      	beq.n	8005b2a <USBD_StdDevReq+0x26>
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d853      	bhi.n	8005bca <USBD_StdDevReq+0xc6>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <USBD_StdDevReq+0x3a>
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d14f      	bne.n	8005bca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8005b3c:	e04a      	b.n	8005bd4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	d83b      	bhi.n	8005bbe <USBD_StdDevReq+0xba>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <USBD_StdDevReq+0x48>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005bb5 	.word	0x08005bb5
 8005b54:	08005bbf 	.word	0x08005bbf
 8005b58:	08005bab 	.word	0x08005bab
 8005b5c:	08005bbf 	.word	0x08005bbf
 8005b60:	08005b7f 	.word	0x08005b7f
 8005b64:	08005b75 	.word	0x08005b75
 8005b68:	08005bbf 	.word	0x08005bbf
 8005b6c:	08005b97 	.word	0x08005b97
 8005b70:	08005b89 	.word	0x08005b89
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9d8 	bl	8005f2c <USBD_GetDescriptor>
      break;
 8005b7c:	e024      	b.n	8005bc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fb3d 	bl	8006200 <USBD_SetAddress>
      break;
 8005b86:	e01f      	b.n	8005bc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fb7c 	bl	8006288 <USBD_SetConfig>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
      break;
 8005b94:	e018      	b.n	8005bc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fc19 	bl	80063d0 <USBD_GetConfig>
      break;
 8005b9e:	e013      	b.n	8005bc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fc49 	bl	800643a <USBD_GetStatus>
      break;
 8005ba8:	e00e      	b.n	8005bc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fc77 	bl	80064a0 <USBD_SetFeature>
      break;
 8005bb2:	e009      	b.n	8005bc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fc86 	bl	80064c8 <USBD_ClrFeature>
      break;
 8005bbc:	e004      	b.n	8005bc8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fcdc 	bl	800657e <USBD_CtlError>
      break;
 8005bc6:	bf00      	nop
    }
    break;
 8005bc8:	e004      	b.n	8005bd4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fcd6 	bl	800657e <USBD_CtlError>
    break;
 8005bd2:	bf00      	nop
  }

  return ret;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop

08005be0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d005      	beq.n	8005c06 <USBD_StdItfReq+0x26>
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	d82e      	bhi.n	8005c5c <USBD_StdItfReq+0x7c>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <USBD_StdItfReq+0x26>
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d12a      	bne.n	8005c5c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d81d      	bhi.n	8005c4e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	889b      	ldrh	r3, [r3, #4]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d813      	bhi.n	8005c44 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	4798      	blx	r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	88db      	ldrh	r3, [r3, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d110      	bne.n	8005c58 <USBD_StdItfReq+0x78>
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10d      	bne.n	8005c58 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fd69 	bl	8006714 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005c42:	e009      	b.n	8005c58 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fc99 	bl	800657e <USBD_CtlError>
      break;
 8005c4c:	e004      	b.n	8005c58 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fc94 	bl	800657e <USBD_CtlError>
      break;
 8005c56:	e000      	b.n	8005c5a <USBD_StdItfReq+0x7a>
      break;
 8005c58:	bf00      	nop
    }
    break;
 8005c5a:	e004      	b.n	8005c66 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fc8d 	bl	800657e <USBD_CtlError>
    break;
 8005c64:	bf00      	nop
  }

  return ret;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	889b      	ldrh	r3, [r3, #4]
 8005c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d007      	beq.n	8005ca0 <USBD_StdEPReq+0x30>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	f200 8140 	bhi.w	8005f16 <USBD_StdEPReq+0x2a6>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00c      	beq.n	8005cb4 <USBD_StdEPReq+0x44>
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	f040 813b 	bne.w	8005f16 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8005cb2:	e135      	b.n	8005f20 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d007      	beq.n	8005ccc <USBD_StdEPReq+0x5c>
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	f300 8124 	bgt.w	8005f0a <USBD_StdEPReq+0x29a>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d07b      	beq.n	8005dbe <USBD_StdEPReq+0x14e>
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d03b      	beq.n	8005d42 <USBD_StdEPReq+0xd2>
 8005cca:	e11e      	b.n	8005f0a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d002      	beq.n	8005cdc <USBD_StdEPReq+0x6c>
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d016      	beq.n	8005d08 <USBD_StdEPReq+0x98>
 8005cda:	e02c      	b.n	8005d36 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <USBD_StdEPReq+0x8e>
 8005ce2:	7bbb      	ldrb	r3, [r7, #14]
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d00a      	beq.n	8005cfe <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 f939 	bl	8006f64 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cf2:	2180      	movs	r1, #128	; 0x80
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f001 f935 	bl	8006f64 <USBD_LL_StallEP>
 8005cfa:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005cfc:	e020      	b.n	8005d40 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fc3c 	bl	800657e <USBD_CtlError>
        break;
 8005d06:	e01b      	b.n	8005d40 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	885b      	ldrh	r3, [r3, #2]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10e      	bne.n	8005d2e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <USBD_StdEPReq+0xbe>
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	d008      	beq.n	8005d2e <USBD_StdEPReq+0xbe>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	88db      	ldrh	r3, [r3, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 f91b 	bl	8006f64 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fcf0 	bl	8006714 <USBD_CtlSendStatus>

        break;
 8005d34:	e004      	b.n	8005d40 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fc20 	bl	800657e <USBD_CtlError>
        break;
 8005d3e:	bf00      	nop
      }
      break;
 8005d40:	e0e8      	b.n	8005f14 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d002      	beq.n	8005d52 <USBD_StdEPReq+0xe2>
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d016      	beq.n	8005d7e <USBD_StdEPReq+0x10e>
 8005d50:	e02e      	b.n	8005db0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <USBD_StdEPReq+0x104>
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d00a      	beq.n	8005d74 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f001 f8fe 	bl	8006f64 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d68:	2180      	movs	r1, #128	; 0x80
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 f8fa 	bl	8006f64 <USBD_LL_StallEP>
 8005d70:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005d72:	e023      	b.n	8005dbc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fc01 	bl	800657e <USBD_CtlError>
        break;
 8005d7c:	e01e      	b.n	8005dbc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	885b      	ldrh	r3, [r3, #2]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d119      	bne.n	8005dba <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 f904 	bl	8006fa2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fcba 	bl	8006714 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
        }
        break;
 8005dae:	e004      	b.n	8005dba <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fbe3 	bl	800657e <USBD_CtlError>
        break;
 8005db8:	e000      	b.n	8005dbc <USBD_StdEPReq+0x14c>
        break;
 8005dba:	bf00      	nop
      }
      break;
 8005dbc:	e0aa      	b.n	8005f14 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d002      	beq.n	8005dce <USBD_StdEPReq+0x15e>
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d032      	beq.n	8005e32 <USBD_StdEPReq+0x1c2>
 8005dcc:	e097      	b.n	8005efe <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <USBD_StdEPReq+0x174>
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d004      	beq.n	8005de4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fbce 	bl	800657e <USBD_CtlError>
          break;
 8005de2:	e091      	b.n	8005f08 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da0b      	bge.n	8005e04 <USBD_StdEPReq+0x194>
 8005dec:	7bbb      	ldrb	r3, [r7, #14]
 8005dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	3310      	adds	r3, #16
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	3304      	adds	r3, #4
 8005e02:	e00b      	b.n	8005e1c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4413      	add	r3, r2
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2202      	movs	r2, #2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fc18 	bl	8006660 <USBD_CtlSendData>
        break;
 8005e30:	e06a      	b.n	8005f08 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da11      	bge.n	8005e5e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	f003 020f 	and.w	r2, r3, #15
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3324      	adds	r3, #36	; 0x24
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d117      	bne.n	8005e84 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fb91 	bl	800657e <USBD_CtlError>
            break;
 8005e5c:	e054      	b.n	8005f08 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	f003 020f 	and.w	r2, r3, #15
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb7e 	bl	800657e <USBD_CtlError>
            break;
 8005e82:	e041      	b.n	8005f08 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da0b      	bge.n	8005ea4 <USBD_StdEPReq+0x234>
 8005e8c:	7bbb      	ldrb	r3, [r7, #14]
 8005e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	3310      	adds	r3, #16
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	e00b      	b.n	8005ebc <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4413      	add	r3, r2
 8005eba:	3304      	adds	r3, #4
 8005ebc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ebe:	7bbb      	ldrb	r3, [r7, #14]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <USBD_StdEPReq+0x25a>
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	2b80      	cmp	r3, #128	; 0x80
 8005ec8:	d103      	bne.n	8005ed2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e00e      	b.n	8005ef0 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ed2:	7bbb      	ldrb	r3, [r7, #14]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f001 f882 	bl	8006fe0 <USBD_LL_IsStallEP>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	e002      	b.n	8005ef0 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fbb2 	bl	8006660 <USBD_CtlSendData>
          break;
 8005efc:	e004      	b.n	8005f08 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fb3c 	bl	800657e <USBD_CtlError>
        break;
 8005f06:	bf00      	nop
      }
      break;
 8005f08:	e004      	b.n	8005f14 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb36 	bl	800657e <USBD_CtlError>
      break;
 8005f12:	bf00      	nop
    }
    break;
 8005f14:	e004      	b.n	8005f20 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fb30 	bl	800657e <USBD_CtlError>
    break;
 8005f1e:	bf00      	nop
  }

  return ret;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	885b      	ldrh	r3, [r3, #2]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	2b06      	cmp	r3, #6
 8005f4e:	f200 8128 	bhi.w	80061a2 <USBD_GetDescriptor+0x276>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <USBD_GetDescriptor+0x2c>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f75 	.word	0x08005f75
 8005f5c:	08005f8d 	.word	0x08005f8d
 8005f60:	08005fcd 	.word	0x08005fcd
 8005f64:	080061a3 	.word	0x080061a3
 8005f68:	080061a3 	.word	0x080061a3
 8005f6c:	08006143 	.word	0x08006143
 8005f70:	0800616f 	.word	0x0800616f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	7c12      	ldrb	r2, [r2, #16]
 8005f80:	f107 0108 	add.w	r1, r7, #8
 8005f84:	4610      	mov	r0, r2
 8005f86:	4798      	blx	r3
 8005f88:	60f8      	str	r0, [r7, #12]
    break;
 8005f8a:	e112      	b.n	80061b2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	7c1b      	ldrb	r3, [r3, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10d      	bne.n	8005fb0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	f107 0208 	add.w	r2, r7, #8
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4798      	blx	r3
 8005fa4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	2202      	movs	r2, #2
 8005fac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005fae:	e100      	b.n	80061b2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	f107 0208 	add.w	r2, r7, #8
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
 8005fc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	701a      	strb	r2, [r3, #0]
    break;
 8005fca:	e0f2      	b.n	80061b2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	885b      	ldrh	r3, [r3, #2]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	f200 80ac 	bhi.w	8006130 <USBD_GetDescriptor+0x204>
 8005fd8:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <USBD_GetDescriptor+0xb4>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	08005ff9 	.word	0x08005ff9
 8005fe4:	0800602d 	.word	0x0800602d
 8005fe8:	08006061 	.word	0x08006061
 8005fec:	08006095 	.word	0x08006095
 8005ff0:	080060c9 	.word	0x080060c9
 8005ff4:	080060fd 	.word	0x080060fd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	7c12      	ldrb	r2, [r2, #16]
 8006010:	f107 0108 	add.w	r1, r7, #8
 8006014:	4610      	mov	r0, r2
 8006016:	4798      	blx	r3
 8006018:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800601a:	e091      	b.n	8006140 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 faad 	bl	800657e <USBD_CtlError>
        err++;
 8006024:	7afb      	ldrb	r3, [r7, #11]
 8006026:	3301      	adds	r3, #1
 8006028:	72fb      	strb	r3, [r7, #11]
      break;
 800602a:	e089      	b.n	8006140 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00b      	beq.n	8006050 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	7c12      	ldrb	r2, [r2, #16]
 8006044:	f107 0108 	add.w	r1, r7, #8
 8006048:	4610      	mov	r0, r2
 800604a:	4798      	blx	r3
 800604c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800604e:	e077      	b.n	8006140 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa93 	bl	800657e <USBD_CtlError>
        err++;
 8006058:	7afb      	ldrb	r3, [r7, #11]
 800605a:	3301      	adds	r3, #1
 800605c:	72fb      	strb	r3, [r7, #11]
      break;
 800605e:	e06f      	b.n	8006140 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	7c12      	ldrb	r2, [r2, #16]
 8006078:	f107 0108 	add.w	r1, r7, #8
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
 8006080:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006082:	e05d      	b.n	8006140 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa79 	bl	800657e <USBD_CtlError>
        err++;
 800608c:	7afb      	ldrb	r3, [r7, #11]
 800608e:	3301      	adds	r3, #1
 8006090:	72fb      	strb	r3, [r7, #11]
      break;
 8006092:	e055      	b.n	8006140 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	7c12      	ldrb	r2, [r2, #16]
 80060ac:	f107 0108 	add.w	r1, r7, #8
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
 80060b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060b6:	e043      	b.n	8006140 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa5f 	bl	800657e <USBD_CtlError>
        err++;
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	3301      	adds	r3, #1
 80060c4:	72fb      	strb	r3, [r7, #11]
      break;
 80060c6:	e03b      	b.n	8006140 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	7c12      	ldrb	r2, [r2, #16]
 80060e0:	f107 0108 	add.w	r1, r7, #8
 80060e4:	4610      	mov	r0, r2
 80060e6:	4798      	blx	r3
 80060e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060ea:	e029      	b.n	8006140 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa45 	bl	800657e <USBD_CtlError>
        err++;
 80060f4:	7afb      	ldrb	r3, [r7, #11]
 80060f6:	3301      	adds	r3, #1
 80060f8:	72fb      	strb	r3, [r7, #11]
      break;
 80060fa:	e021      	b.n	8006140 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	7c12      	ldrb	r2, [r2, #16]
 8006114:	f107 0108 	add.w	r1, r7, #8
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
 800611c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800611e:	e00f      	b.n	8006140 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa2b 	bl	800657e <USBD_CtlError>
        err++;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	3301      	adds	r3, #1
 800612c:	72fb      	strb	r3, [r7, #11]
      break;
 800612e:	e007      	b.n	8006140 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa23 	bl	800657e <USBD_CtlError>
      err++;
 8006138:	7afb      	ldrb	r3, [r7, #11]
 800613a:	3301      	adds	r3, #1
 800613c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800613e:	bf00      	nop
    }
    break;
 8006140:	e037      	b.n	80061b2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	7c1b      	ldrb	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	f107 0208 	add.w	r2, r7, #8
 8006156:	4610      	mov	r0, r2
 8006158:	4798      	blx	r3
 800615a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800615c:	e029      	b.n	80061b2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fa0c 	bl	800657e <USBD_CtlError>
      err++;
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	3301      	adds	r3, #1
 800616a:	72fb      	strb	r3, [r7, #11]
    break;
 800616c:	e021      	b.n	80061b2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	7c1b      	ldrb	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10d      	bne.n	8006192 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	f107 0208 	add.w	r2, r7, #8
 8006182:	4610      	mov	r0, r2
 8006184:	4798      	blx	r3
 8006186:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	2207      	movs	r2, #7
 800618e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006190:	e00f      	b.n	80061b2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f9f2 	bl	800657e <USBD_CtlError>
      err++;
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	3301      	adds	r3, #1
 800619e:	72fb      	strb	r3, [r7, #11]
    break;
 80061a0:	e007      	b.n	80061b2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f9ea 	bl	800657e <USBD_CtlError>
    err++;
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	3301      	adds	r3, #1
 80061ae:	72fb      	strb	r3, [r7, #11]
    break;
 80061b0:	bf00      	nop
  }

  if (err != 0U)
 80061b2:	7afb      	ldrb	r3, [r7, #11]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d11e      	bne.n	80061f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	88db      	ldrh	r3, [r3, #6]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d016      	beq.n	80061ee <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80061c0:	893b      	ldrh	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00e      	beq.n	80061e4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	88da      	ldrh	r2, [r3, #6]
 80061ca:	893b      	ldrh	r3, [r7, #8]
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bf28      	it	cs
 80061d0:	4613      	movcs	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80061d6:	893b      	ldrh	r3, [r7, #8]
 80061d8:	461a      	mov	r2, r3
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fa3f 	bl	8006660 <USBD_CtlSendData>
 80061e2:	e009      	b.n	80061f8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f9c9 	bl	800657e <USBD_CtlError>
 80061ec:	e004      	b.n	80061f8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa90 	bl	8006714 <USBD_CtlSendStatus>
 80061f4:	e000      	b.n	80061f8 <USBD_GetDescriptor+0x2cc>
    return;
 80061f6:	bf00      	nop
    }
  }
}
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop

08006200 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	889b      	ldrh	r3, [r3, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d130      	bne.n	8006274 <USBD_SetAddress+0x74>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	88db      	ldrh	r3, [r3, #6]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d12c      	bne.n	8006274 <USBD_SetAddress+0x74>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	885b      	ldrh	r3, [r3, #2]
 800621e:	2b7f      	cmp	r3, #127	; 0x7f
 8006220:	d828      	bhi.n	8006274 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	885b      	ldrh	r3, [r3, #2]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800622c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006234:	2b03      	cmp	r3, #3
 8006236:	d104      	bne.n	8006242 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f99f 	bl	800657e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006240:	e01d      	b.n	800627e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	7bfa      	ldrb	r2, [r7, #15]
 8006246:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fef2 	bl	8007038 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa5d 	bl	8006714 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006268:	e009      	b.n	800627e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006272:	e004      	b.n	800627e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f981 	bl	800657e <USBD_CtlError>
  }
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	885b      	ldrh	r3, [r3, #2]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	4b4b      	ldr	r3, [pc, #300]	; (80063cc <USBD_SetConfig+0x144>)
 800629e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062a0:	4b4a      	ldr	r3, [pc, #296]	; (80063cc <USBD_SetConfig+0x144>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d905      	bls.n	80062b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f967 	bl	800657e <USBD_CtlError>
    return USBD_FAIL;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e087      	b.n	80063c4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d002      	beq.n	80062c4 <USBD_SetConfig+0x3c>
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d025      	beq.n	800630e <USBD_SetConfig+0x86>
 80062c2:	e071      	b.n	80063a8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80062c4:	4b41      	ldr	r3, [pc, #260]	; (80063cc <USBD_SetConfig+0x144>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01c      	beq.n	8006306 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80062cc:	4b3f      	ldr	r3, [pc, #252]	; (80063cc <USBD_SetConfig+0x144>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80062d6:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <USBD_SetConfig+0x144>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff f999 	bl	8005614 <USBD_SetClassConfig>
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f945 	bl	800657e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80062f4:	e065      	b.n	80063c2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa0c 	bl	8006714 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2203      	movs	r2, #3
 8006300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006304:	e05d      	b.n	80063c2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa04 	bl	8006714 <USBD_CtlSendStatus>
    break;
 800630c:	e059      	b.n	80063c2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800630e:	4b2f      	ldr	r3, [pc, #188]	; (80063cc <USBD_SetConfig+0x144>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d112      	bne.n	800633c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800631e:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <USBD_SetConfig+0x144>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006328:	4b28      	ldr	r3, [pc, #160]	; (80063cc <USBD_SetConfig+0x144>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff f98c 	bl	800564c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f9ed 	bl	8006714 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800633a:	e042      	b.n	80063c2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800633c:	4b23      	ldr	r3, [pc, #140]	; (80063cc <USBD_SetConfig+0x144>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d02a      	beq.n	80063a0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff f97a 	bl	800564c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006358:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <USBD_SetConfig+0x144>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006362:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <USBD_SetConfig+0x144>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff f953 	bl	8005614 <USBD_SetClassConfig>
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00f      	beq.n	8006398 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f8ff 	bl	800657e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff f95f 	bl	800564c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006396:	e014      	b.n	80063c2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f9bb 	bl	8006714 <USBD_CtlSendStatus>
    break;
 800639e:	e010      	b.n	80063c2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f9b7 	bl	8006714 <USBD_CtlSendStatus>
    break;
 80063a6:	e00c      	b.n	80063c2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f8e7 	bl	800657e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <USBD_SetConfig+0x144>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff f948 	bl	800564c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80063bc:	2303      	movs	r3, #3
 80063be:	73fb      	strb	r3, [r7, #15]
    break;
 80063c0:	bf00      	nop
  }

  return ret;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	2000021c 	.word	0x2000021c

080063d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	88db      	ldrh	r3, [r3, #6]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d004      	beq.n	80063ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f8ca 	bl	800657e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80063ea:	e022      	b.n	8006432 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	dc02      	bgt.n	80063fc <USBD_GetConfig+0x2c>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	dc03      	bgt.n	8006402 <USBD_GetConfig+0x32>
 80063fa:	e015      	b.n	8006428 <USBD_GetConfig+0x58>
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d00b      	beq.n	8006418 <USBD_GetConfig+0x48>
 8006400:	e012      	b.n	8006428 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3308      	adds	r3, #8
 800640c:	2201      	movs	r2, #1
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f925 	bl	8006660 <USBD_CtlSendData>
      break;
 8006416:	e00c      	b.n	8006432 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	2201      	movs	r2, #1
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f91d 	bl	8006660 <USBD_CtlSendData>
      break;
 8006426:	e004      	b.n	8006432 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f8a7 	bl	800657e <USBD_CtlError>
      break;
 8006430:	bf00      	nop
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644a:	3b01      	subs	r3, #1
 800644c:	2b02      	cmp	r3, #2
 800644e:	d81e      	bhi.n	800648e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	88db      	ldrh	r3, [r3, #6]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d004      	beq.n	8006462 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f88f 	bl	800657e <USBD_CtlError>
      break;
 8006460:	e01a      	b.n	8006498 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f043 0202 	orr.w	r2, r3, #2
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	330c      	adds	r3, #12
 8006482:	2202      	movs	r2, #2
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f8ea 	bl	8006660 <USBD_CtlSendData>
    break;
 800648c:	e004      	b.n	8006498 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f874 	bl	800657e <USBD_CtlError>
    break;
 8006496:	bf00      	nop
  }
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	885b      	ldrh	r3, [r3, #2]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d106      	bne.n	80064c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f92a 	bl	8006714 <USBD_CtlSendStatus>
  }
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d8:	3b01      	subs	r3, #1
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d80b      	bhi.n	80064f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	885b      	ldrh	r3, [r3, #2]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d10c      	bne.n	8006500 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f910 	bl	8006714 <USBD_CtlSendStatus>
      }
      break;
 80064f4:	e004      	b.n	8006500 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f840 	bl	800657e <USBD_CtlError>
      break;
 80064fe:	e000      	b.n	8006502 <USBD_ClrFeature+0x3a>
      break;
 8006500:	bf00      	nop
  }
}
 8006502:	bf00      	nop
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	781a      	ldrb	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	781a      	ldrb	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff fac6 	bl	8005ac6 <SWAPBYTE>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f7ff fab9 	bl	8005ac6 <SWAPBYTE>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3301      	adds	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff faac 	bl	8005ac6 <SWAPBYTE>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	80da      	strh	r2, [r3, #6]
}
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006588:	2180      	movs	r1, #128	; 0x80
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fcea 	bl	8006f64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006590:	2100      	movs	r1, #0
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fce6 	bl	8006f64 <USBD_LL_StallEP>
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d036      	beq.n	8006624 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80065ba:	6938      	ldr	r0, [r7, #16]
 80065bc:	f000 f836 	bl	800662c <USBD_GetLen>
 80065c0:	4603      	mov	r3, r0
 80065c2:	3301      	adds	r3, #1
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	4413      	add	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	7812      	ldrb	r2, [r2, #0]
 80065d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	3301      	adds	r3, #1
 80065de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4413      	add	r3, r2
 80065e6:	2203      	movs	r2, #3
 80065e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	3301      	adds	r3, #1
 80065ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80065f0:	e013      	b.n	800661a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4413      	add	r3, r2
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
    idx++;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	3301      	adds	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4413      	add	r3, r2
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
    idx++;
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	3301      	adds	r3, #1
 8006618:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e7      	bne.n	80065f2 <USBD_GetString+0x52>
 8006622:	e000      	b.n	8006626 <USBD_GetString+0x86>
    return;
 8006624:	bf00      	nop
  }
}
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800663c:	e005      	b.n	800664a <USBD_GetLen+0x1e>
  {
    len++;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	3301      	adds	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3301      	adds	r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f5      	bne.n	800663e <USBD_GetLen+0x12>
  }

  return len;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2202      	movs	r2, #2
 8006670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	2100      	movs	r1, #0
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fcf5 	bl	8007076 <USBD_LL_Transmit>

  return USBD_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	2100      	movs	r1, #0
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fce4 	bl	8007076 <USBD_LL_Transmit>

  return USBD_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2203      	movs	r2, #3
 80066c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	2100      	movs	r1, #0
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fce8 	bl	80070b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	2100      	movs	r1, #0
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fcd7 	bl	80070b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2204      	movs	r2, #4
 8006720:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006724:	2300      	movs	r3, #0
 8006726:	2200      	movs	r2, #0
 8006728:	2100      	movs	r1, #0
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fca3 	bl	8007076 <USBD_LL_Transmit>

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2205      	movs	r2, #5
 8006746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800674a:	2300      	movs	r3, #0
 800674c:	2200      	movs	r2, #0
 800674e:	2100      	movs	r1, #0
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fcb1 	bl	80070b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006764:	2200      	movs	r2, #0
 8006766:	4912      	ldr	r1, [pc, #72]	; (80067b0 <MX_USB_DEVICE_Init+0x50>)
 8006768:	4812      	ldr	r0, [pc, #72]	; (80067b4 <MX_USB_DEVICE_Init+0x54>)
 800676a:	f7fe fee5 	bl	8005538 <USBD_Init>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006774:	f7fa fd40 	bl	80011f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006778:	490f      	ldr	r1, [pc, #60]	; (80067b8 <MX_USB_DEVICE_Init+0x58>)
 800677a:	480e      	ldr	r0, [pc, #56]	; (80067b4 <MX_USB_DEVICE_Init+0x54>)
 800677c:	f7fe ff12 	bl	80055a4 <USBD_RegisterClass>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006786:	f7fa fd37 	bl	80011f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800678a:	490c      	ldr	r1, [pc, #48]	; (80067bc <MX_USB_DEVICE_Init+0x5c>)
 800678c:	4809      	ldr	r0, [pc, #36]	; (80067b4 <MX_USB_DEVICE_Init+0x54>)
 800678e:	f7fe fe37 	bl	8005400 <USBD_CDC_RegisterInterface>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006798:	f7fa fd2e 	bl	80011f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800679c:	4805      	ldr	r0, [pc, #20]	; (80067b4 <MX_USB_DEVICE_Init+0x54>)
 800679e:	f7fe ff22 	bl	80055e6 <USBD_Start>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80067a8:	f7fa fd26 	bl	80011f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067ac:	bf00      	nop
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000144 	.word	0x20000144
 80067b4:	200002d8 	.word	0x200002d8
 80067b8:	2000002c 	.word	0x2000002c
 80067bc:	20000130 	.word	0x20000130

080067c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067c4:	2200      	movs	r2, #0
 80067c6:	4905      	ldr	r1, [pc, #20]	; (80067dc <CDC_Init_FS+0x1c>)
 80067c8:	4805      	ldr	r0, [pc, #20]	; (80067e0 <CDC_Init_FS+0x20>)
 80067ca:	f7fe fe2e 	bl	800542a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80067ce:	4905      	ldr	r1, [pc, #20]	; (80067e4 <CDC_Init_FS+0x24>)
 80067d0:	4803      	ldr	r0, [pc, #12]	; (80067e0 <CDC_Init_FS+0x20>)
 80067d2:	f7fe fe43 	bl	800545c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80067d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80067d8:	4618      	mov	r0, r3
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	200005e8 	.word	0x200005e8
 80067e0:	200002d8 	.word	0x200002d8
 80067e4:	200005a8 	.word	0x200005a8

080067e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80067ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
 8006804:	4613      	mov	r3, r2
 8006806:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	2b23      	cmp	r3, #35	; 0x23
 800680c:	d84a      	bhi.n	80068a4 <CDC_Control_FS+0xac>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <CDC_Control_FS+0x1c>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	080068a5 	.word	0x080068a5
 8006818:	080068a5 	.word	0x080068a5
 800681c:	080068a5 	.word	0x080068a5
 8006820:	080068a5 	.word	0x080068a5
 8006824:	080068a5 	.word	0x080068a5
 8006828:	080068a5 	.word	0x080068a5
 800682c:	080068a5 	.word	0x080068a5
 8006830:	080068a5 	.word	0x080068a5
 8006834:	080068a5 	.word	0x080068a5
 8006838:	080068a5 	.word	0x080068a5
 800683c:	080068a5 	.word	0x080068a5
 8006840:	080068a5 	.word	0x080068a5
 8006844:	080068a5 	.word	0x080068a5
 8006848:	080068a5 	.word	0x080068a5
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068a5 	.word	0x080068a5
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080068a5 	.word	0x080068a5
 800685c:	080068a5 	.word	0x080068a5
 8006860:	080068a5 	.word	0x080068a5
 8006864:	080068a5 	.word	0x080068a5
 8006868:	080068a5 	.word	0x080068a5
 800686c:	080068a5 	.word	0x080068a5
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080068a5 	.word	0x080068a5
 8006878:	080068a5 	.word	0x080068a5
 800687c:	080068a5 	.word	0x080068a5
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068a5 	.word	0x080068a5
 8006888:	080068a5 	.word	0x080068a5
 800688c:	080068a5 	.word	0x080068a5
 8006890:	080068a5 	.word	0x080068a5
 8006894:	080068a5 	.word	0x080068a5
 8006898:	080068a5 	.word	0x080068a5
 800689c:	080068a5 	.word	0x080068a5
 80068a0:	080068a5 	.word	0x080068a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80068a4:	bf00      	nop
  }

  return (USBD_OK);
 80068a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
	strncpy(str_rx, (char*) Buf, *Len);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4808      	ldr	r0, [pc, #32]	; (80068e8 <CDC_Receive_FS+0x34>)
 80068c8:	f000 fd72 	bl	80073b0 <strncpy>
	str_rx[*Len] = 0;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a05      	ldr	r2, [pc, #20]	; (80068e8 <CDC_Receive_FS+0x34>)
 80068d2:	2100      	movs	r1, #0
 80068d4:	54d1      	strb	r1, [r2, r3]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068d6:	4805      	ldr	r0, [pc, #20]	; (80068ec <CDC_Receive_FS+0x38>)
 80068d8:	f7fe fe04 	bl	80054e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80068dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200002a4 	.word	0x200002a4
 80068ec:	200002d8 	.word	0x200002d8

080068f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006900:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <CDC_Transmit_FS+0x48>)
 8006902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006906:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006912:	2301      	movs	r3, #1
 8006914:	e00b      	b.n	800692e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006916:	887b      	ldrh	r3, [r7, #2]
 8006918:	461a      	mov	r2, r3
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4806      	ldr	r0, [pc, #24]	; (8006938 <CDC_Transmit_FS+0x48>)
 800691e:	f7fe fd84 	bl	800542a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006922:	4805      	ldr	r0, [pc, #20]	; (8006938 <CDC_Transmit_FS+0x48>)
 8006924:	f7fe fdae 	bl	8005484 <USBD_CDC_TransmitPacket>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	200002d8 	.word	0x200002d8

0800693c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800694e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006952:	4618      	mov	r0, r3
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	6039      	str	r1, [r7, #0]
 800696a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2212      	movs	r2, #18
 8006970:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006972:	4b03      	ldr	r3, [pc, #12]	; (8006980 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20000160 	.word	0x20000160

08006984 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	6039      	str	r1, [r7, #0]
 800698e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2204      	movs	r2, #4
 8006994:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	20000174 	.word	0x20000174

080069a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	6039      	str	r1, [r7, #0]
 80069b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d105      	bne.n	80069c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	4907      	ldr	r1, [pc, #28]	; (80069dc <USBD_FS_ProductStrDescriptor+0x34>)
 80069be:	4808      	ldr	r0, [pc, #32]	; (80069e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80069c0:	f7ff fdee 	bl	80065a0 <USBD_GetString>
 80069c4:	e004      	b.n	80069d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	4904      	ldr	r1, [pc, #16]	; (80069dc <USBD_FS_ProductStrDescriptor+0x34>)
 80069ca:	4805      	ldr	r0, [pc, #20]	; (80069e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80069cc:	f7ff fde8 	bl	80065a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069d0:	4b02      	ldr	r3, [pc, #8]	; (80069dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000628 	.word	0x20000628
 80069e0:	08007b14 	.word	0x08007b14

080069e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	6039      	str	r1, [r7, #0]
 80069ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	4904      	ldr	r1, [pc, #16]	; (8006a04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80069f4:	4804      	ldr	r0, [pc, #16]	; (8006a08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80069f6:	f7ff fdd3 	bl	80065a0 <USBD_GetString>
  return USBD_StrDesc;
 80069fa:	4b02      	ldr	r3, [pc, #8]	; (8006a04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20000628 	.word	0x20000628
 8006a08:	08007b2c 	.word	0x08007b2c

08006a0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	6039      	str	r1, [r7, #0]
 8006a16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	221a      	movs	r2, #26
 8006a1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a1e:	f000 f843 	bl	8006aa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a22:	4b02      	ldr	r3, [pc, #8]	; (8006a2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000178 	.word	0x20000178

08006a30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	6039      	str	r1, [r7, #0]
 8006a3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d105      	bne.n	8006a4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	4907      	ldr	r1, [pc, #28]	; (8006a64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a46:	4808      	ldr	r0, [pc, #32]	; (8006a68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a48:	f7ff fdaa 	bl	80065a0 <USBD_GetString>
 8006a4c:	e004      	b.n	8006a58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	4904      	ldr	r1, [pc, #16]	; (8006a64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a52:	4805      	ldr	r0, [pc, #20]	; (8006a68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a54:	f7ff fda4 	bl	80065a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000628 	.word	0x20000628
 8006a68:	08007b40 	.word	0x08007b40

08006a6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	6039      	str	r1, [r7, #0]
 8006a76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	4907      	ldr	r1, [pc, #28]	; (8006aa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a82:	4808      	ldr	r0, [pc, #32]	; (8006aa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a84:	f7ff fd8c 	bl	80065a0 <USBD_GetString>
 8006a88:	e004      	b.n	8006a94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	4904      	ldr	r1, [pc, #16]	; (8006aa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a8e:	4805      	ldr	r0, [pc, #20]	; (8006aa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a90:	f7ff fd86 	bl	80065a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000628 	.word	0x20000628
 8006aa4:	08007b4c 	.word	0x08007b4c

08006aa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006aae:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <Get_SerialNum+0x44>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <Get_SerialNum+0x48>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006aba:	4b0e      	ldr	r3, [pc, #56]	; (8006af4 <Get_SerialNum+0x4c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ace:	2208      	movs	r2, #8
 8006ad0:	4909      	ldr	r1, [pc, #36]	; (8006af8 <Get_SerialNum+0x50>)
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f814 	bl	8006b00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ad8:	2204      	movs	r2, #4
 8006ada:	4908      	ldr	r1, [pc, #32]	; (8006afc <Get_SerialNum+0x54>)
 8006adc:	68b8      	ldr	r0, [r7, #8]
 8006ade:	f000 f80f 	bl	8006b00 <IntToUnicode>
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	1fff7a10 	.word	0x1fff7a10
 8006af0:	1fff7a14 	.word	0x1fff7a14
 8006af4:	1fff7a18 	.word	0x1fff7a18
 8006af8:	2000017a 	.word	0x2000017a
 8006afc:	2000018a 	.word	0x2000018a

08006b00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	75fb      	strb	r3, [r7, #23]
 8006b16:	e027      	b.n	8006b68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	0f1b      	lsrs	r3, r3, #28
 8006b1c:	2b09      	cmp	r3, #9
 8006b1e:	d80b      	bhi.n	8006b38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	0f1b      	lsrs	r3, r3, #28
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	440b      	add	r3, r1
 8006b30:	3230      	adds	r2, #48	; 0x30
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e00a      	b.n	8006b4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	0f1b      	lsrs	r3, r3, #28
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4619      	mov	r1, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	440b      	add	r3, r1
 8006b48:	3237      	adds	r2, #55	; 0x37
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	3301      	adds	r3, #1
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	3301      	adds	r3, #1
 8006b66:	75fb      	strb	r3, [r7, #23]
 8006b68:	7dfa      	ldrb	r2, [r7, #23]
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d3d3      	bcc.n	8006b18 <IntToUnicode+0x18>
  }
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08a      	sub	sp, #40	; 0x28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b88:	f107 0314 	add.w	r3, r7, #20
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	605a      	str	r2, [r3, #4]
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ba0:	d13a      	bne.n	8006c18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <HAL_PCD_MspInit+0xa0>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	4a1d      	ldr	r2, [pc, #116]	; (8006c20 <HAL_PCD_MspInit+0xa0>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bb2:	4b1b      	ldr	r3, [pc, #108]	; (8006c20 <HAL_PCD_MspInit+0xa0>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006bbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006bd0:	230a      	movs	r3, #10
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bd4:	f107 0314 	add.w	r3, r7, #20
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4812      	ldr	r0, [pc, #72]	; (8006c24 <HAL_PCD_MspInit+0xa4>)
 8006bdc:	f7fa fda8 	bl	8001730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <HAL_PCD_MspInit+0xa0>)
 8006be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be4:	4a0e      	ldr	r2, [pc, #56]	; (8006c20 <HAL_PCD_MspInit+0xa0>)
 8006be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bea:	6353      	str	r3, [r2, #52]	; 0x34
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <HAL_PCD_MspInit+0xa0>)
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <HAL_PCD_MspInit+0xa0>)
 8006bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8006bfc:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <HAL_PCD_MspInit+0xa0>)
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	2043      	movs	r0, #67	; 0x43
 8006c0e:	f7fa fd3c 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006c12:	2043      	movs	r0, #67	; 0x43
 8006c14:	f7fa fd55 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006c18:	bf00      	nop
 8006c1a:	3728      	adds	r7, #40	; 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40023800 	.word	0x40023800
 8006c24:	40020000 	.word	0x40020000

08006c28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f7fe fd1c 	bl	800567c <USBD_LL_SetupStage>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	4619      	mov	r1, r3
 8006c76:	f7fe fd56 	bl	8005726 <USBD_LL_DataOutStage>
}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c94:	78fa      	ldrb	r2, [r7, #3]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	3348      	adds	r3, #72	; 0x48
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f7fe fd9f 	bl	80057ec <USBD_LL_DataInStage>
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fe fea3 	bl	8005a10 <USBD_LL_SOF>
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
 8006cea:	e008      	b.n	8006cfe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d102      	bne.n	8006cfa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	e001      	b.n	8006cfe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006cfa:	f7fa fa7d 	bl	80011f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d04:	7bfa      	ldrb	r2, [r7, #15]
 8006d06:	4611      	mov	r1, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe fe46 	bl	800599a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fdff 	bl	8005918 <USBD_LL_Reset>
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fe41 	bl	80059ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <HAL_PCD_SuspendCallback+0x48>)
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	4a03      	ldr	r2, [pc, #12]	; (8006d6c <HAL_PCD_SuspendCallback+0x48>)
 8006d5e:	f043 0306 	orr.w	r3, r3, #6
 8006d62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	e000ed00 	.word	0xe000ed00

08006d70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fe30 	bl	80059e4 <USBD_LL_Resume>
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe fe5b 	bl	8005a5e <USBD_LL_IsoOUTIncomplete>
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fe3c 	bl	8005a44 <USBD_LL_IsoINIncomplete>
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fe48 	bl	8005a78 <USBD_LL_DevConnected>
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fe45 	bl	8005a8e <USBD_LL_DevDisconnected>
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d13c      	bne.n	8006e96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006e1c:	4a20      	ldr	r2, [pc, #128]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e2c:	4b1c      	ldr	r3, [pc, #112]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006e32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006e34:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e36:	2204      	movs	r2, #4
 8006e38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006e3a:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e40:	4b17      	ldr	r3, [pc, #92]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006e46:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e48:	2202      	movs	r2, #2
 8006e4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006e4c:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006e52:	4b13      	ldr	r3, [pc, #76]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006e58:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006e5e:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006e64:	4b0e      	ldr	r3, [pc, #56]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e6a:	480d      	ldr	r0, [pc, #52]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e6c:	f7fa ff5c 	bl	8001d28 <HAL_PCD_Init>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006e76:	f7fa f9bf 	bl	80011f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	4808      	ldr	r0, [pc, #32]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e7e:	f7fc f8ba 	bl	8002ff6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e82:	2240      	movs	r2, #64	; 0x40
 8006e84:	2100      	movs	r1, #0
 8006e86:	4806      	ldr	r0, [pc, #24]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e88:	f7fc f86e 	bl	8002f68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e8c:	2280      	movs	r2, #128	; 0x80
 8006e8e:	2101      	movs	r1, #1
 8006e90:	4803      	ldr	r0, [pc, #12]	; (8006ea0 <USBD_LL_Init+0x94>)
 8006e92:	f7fc f869 	bl	8002f68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20000828 	.word	0x20000828

08006ea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fb f851 	bl	8001f62 <HAL_PCD_Start>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f92a 	bl	8007120 <USBD_Get_USB_Status>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	4608      	mov	r0, r1
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4603      	mov	r3, r0
 8006eea:	70fb      	strb	r3, [r7, #3]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70bb      	strb	r3, [r7, #2]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f02:	78bb      	ldrb	r3, [r7, #2]
 8006f04:	883a      	ldrh	r2, [r7, #0]
 8006f06:	78f9      	ldrb	r1, [r7, #3]
 8006f08:	f7fb fc35 	bl	8002776 <HAL_PCD_EP_Open>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f904 	bl	8007120 <USBD_Get_USB_Status>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fb fc7e 	bl	8002846 <HAL_PCD_EP_Close>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f8e5 	bl	8007120 <USBD_Get_USB_Status>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	4611      	mov	r1, r2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fb fd56 	bl	8002a34 <HAL_PCD_EP_SetStall>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 f8c6 	bl	8007120 <USBD_Get_USB_Status>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fb fd9b 	bl	8002afc <HAL_PCD_EP_ClrStall>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 f8a7 	bl	8007120 <USBD_Get_USB_Status>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ff2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	da0b      	bge.n	8007014 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007002:	68f9      	ldr	r1, [r7, #12]
 8007004:	4613      	mov	r3, r2
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	333e      	adds	r3, #62	; 0x3e
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	e00b      	b.n	800702c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800702a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	4611      	mov	r1, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f7fb fb68 	bl	800272c <HAL_PCD_SetAddress>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f85c 	bl	8007120 <USBD_Get_USB_Status>
 8007068:	4603      	mov	r3, r0
 800706a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800706c:	7bbb      	ldrb	r3, [r7, #14]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
 8007082:	460b      	mov	r3, r1
 8007084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007094:	7af9      	ldrb	r1, [r7, #11]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	f7fb fc81 	bl	80029a0 <HAL_PCD_EP_Transmit>
 800709e:	4603      	mov	r3, r0
 80070a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f83b 	bl	8007120 <USBD_Get_USB_Status>
 80070aa:	4603      	mov	r3, r0
 80070ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	607a      	str	r2, [r7, #4]
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	460b      	mov	r3, r1
 80070c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80070d6:	7af9      	ldrb	r1, [r7, #11]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	f7fb fbfd 	bl	80028da <HAL_PCD_EP_Receive>
 80070e0:	4603      	mov	r3, r0
 80070e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f81a 	bl	8007120 <USBD_Get_USB_Status>
 80070ec:	4603      	mov	r3, r0
 80070ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	4611      	mov	r1, r2
 8007110:	4618      	mov	r0, r3
 8007112:	f7fb fc2d 	bl	8002970 <HAL_PCD_EP_GetRxCount>
 8007116:	4603      	mov	r3, r0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	2b03      	cmp	r3, #3
 8007132:	d817      	bhi.n	8007164 <USBD_Get_USB_Status+0x44>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <USBD_Get_USB_Status+0x1c>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	0800714d 	.word	0x0800714d
 8007140:	08007153 	.word	0x08007153
 8007144:	08007159 	.word	0x08007159
 8007148:	0800715f 	.word	0x0800715f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
    break;
 8007150:	e00b      	b.n	800716a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007152:	2303      	movs	r3, #3
 8007154:	73fb      	strb	r3, [r7, #15]
    break;
 8007156:	e008      	b.n	800716a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
    break;
 800715c:	e005      	b.n	800716a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800715e:	2303      	movs	r3, #3
 8007160:	73fb      	strb	r3, [r7, #15]
    break;
 8007162:	e002      	b.n	800716a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	73fb      	strb	r3, [r7, #15]
    break;
 8007168:	bf00      	nop
  }
  return usb_status;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <__errno>:
 8007178:	4b01      	ldr	r3, [pc, #4]	; (8007180 <__errno+0x8>)
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20000194 	.word	0x20000194

08007184 <__libc_init_array>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4d0d      	ldr	r5, [pc, #52]	; (80071bc <__libc_init_array+0x38>)
 8007188:	4c0d      	ldr	r4, [pc, #52]	; (80071c0 <__libc_init_array+0x3c>)
 800718a:	1b64      	subs	r4, r4, r5
 800718c:	10a4      	asrs	r4, r4, #2
 800718e:	2600      	movs	r6, #0
 8007190:	42a6      	cmp	r6, r4
 8007192:	d109      	bne.n	80071a8 <__libc_init_array+0x24>
 8007194:	4d0b      	ldr	r5, [pc, #44]	; (80071c4 <__libc_init_array+0x40>)
 8007196:	4c0c      	ldr	r4, [pc, #48]	; (80071c8 <__libc_init_array+0x44>)
 8007198:	f000 fc72 	bl	8007a80 <_init>
 800719c:	1b64      	subs	r4, r4, r5
 800719e:	10a4      	asrs	r4, r4, #2
 80071a0:	2600      	movs	r6, #0
 80071a2:	42a6      	cmp	r6, r4
 80071a4:	d105      	bne.n	80071b2 <__libc_init_array+0x2e>
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ac:	4798      	blx	r3
 80071ae:	3601      	adds	r6, #1
 80071b0:	e7ee      	b.n	8007190 <__libc_init_array+0xc>
 80071b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b6:	4798      	blx	r3
 80071b8:	3601      	adds	r6, #1
 80071ba:	e7f2      	b.n	80071a2 <__libc_init_array+0x1e>
 80071bc:	08007bb0 	.word	0x08007bb0
 80071c0:	08007bb0 	.word	0x08007bb0
 80071c4:	08007bb0 	.word	0x08007bb0
 80071c8:	08007bb4 	.word	0x08007bb4

080071cc <malloc>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <malloc+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f000 b863 	b.w	800729c <_malloc_r>
 80071d6:	bf00      	nop
 80071d8:	20000194 	.word	0x20000194

080071dc <free>:
 80071dc:	4b02      	ldr	r3, [pc, #8]	; (80071e8 <free+0xc>)
 80071de:	4601      	mov	r1, r0
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	f000 b80b 	b.w	80071fc <_free_r>
 80071e6:	bf00      	nop
 80071e8:	20000194 	.word	0x20000194

080071ec <memset>:
 80071ec:	4402      	add	r2, r0
 80071ee:	4603      	mov	r3, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <_free_r>:
 80071fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071fe:	2900      	cmp	r1, #0
 8007200:	d048      	beq.n	8007294 <_free_r+0x98>
 8007202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007206:	9001      	str	r0, [sp, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f1a1 0404 	sub.w	r4, r1, #4
 800720e:	bfb8      	it	lt
 8007210:	18e4      	addlt	r4, r4, r3
 8007212:	f000 f8e1 	bl	80073d8 <__malloc_lock>
 8007216:	4a20      	ldr	r2, [pc, #128]	; (8007298 <_free_r+0x9c>)
 8007218:	9801      	ldr	r0, [sp, #4]
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	4615      	mov	r5, r2
 800721e:	b933      	cbnz	r3, 800722e <_free_r+0x32>
 8007220:	6063      	str	r3, [r4, #4]
 8007222:	6014      	str	r4, [r2, #0]
 8007224:	b003      	add	sp, #12
 8007226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800722a:	f000 b8db 	b.w	80073e4 <__malloc_unlock>
 800722e:	42a3      	cmp	r3, r4
 8007230:	d90b      	bls.n	800724a <_free_r+0x4e>
 8007232:	6821      	ldr	r1, [r4, #0]
 8007234:	1862      	adds	r2, r4, r1
 8007236:	4293      	cmp	r3, r2
 8007238:	bf04      	itt	eq
 800723a:	681a      	ldreq	r2, [r3, #0]
 800723c:	685b      	ldreq	r3, [r3, #4]
 800723e:	6063      	str	r3, [r4, #4]
 8007240:	bf04      	itt	eq
 8007242:	1852      	addeq	r2, r2, r1
 8007244:	6022      	streq	r2, [r4, #0]
 8007246:	602c      	str	r4, [r5, #0]
 8007248:	e7ec      	b.n	8007224 <_free_r+0x28>
 800724a:	461a      	mov	r2, r3
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	b10b      	cbz	r3, 8007254 <_free_r+0x58>
 8007250:	42a3      	cmp	r3, r4
 8007252:	d9fa      	bls.n	800724a <_free_r+0x4e>
 8007254:	6811      	ldr	r1, [r2, #0]
 8007256:	1855      	adds	r5, r2, r1
 8007258:	42a5      	cmp	r5, r4
 800725a:	d10b      	bne.n	8007274 <_free_r+0x78>
 800725c:	6824      	ldr	r4, [r4, #0]
 800725e:	4421      	add	r1, r4
 8007260:	1854      	adds	r4, r2, r1
 8007262:	42a3      	cmp	r3, r4
 8007264:	6011      	str	r1, [r2, #0]
 8007266:	d1dd      	bne.n	8007224 <_free_r+0x28>
 8007268:	681c      	ldr	r4, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	6053      	str	r3, [r2, #4]
 800726e:	4421      	add	r1, r4
 8007270:	6011      	str	r1, [r2, #0]
 8007272:	e7d7      	b.n	8007224 <_free_r+0x28>
 8007274:	d902      	bls.n	800727c <_free_r+0x80>
 8007276:	230c      	movs	r3, #12
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	e7d3      	b.n	8007224 <_free_r+0x28>
 800727c:	6825      	ldr	r5, [r4, #0]
 800727e:	1961      	adds	r1, r4, r5
 8007280:	428b      	cmp	r3, r1
 8007282:	bf04      	itt	eq
 8007284:	6819      	ldreq	r1, [r3, #0]
 8007286:	685b      	ldreq	r3, [r3, #4]
 8007288:	6063      	str	r3, [r4, #4]
 800728a:	bf04      	itt	eq
 800728c:	1949      	addeq	r1, r1, r5
 800728e:	6021      	streq	r1, [r4, #0]
 8007290:	6054      	str	r4, [r2, #4]
 8007292:	e7c7      	b.n	8007224 <_free_r+0x28>
 8007294:	b003      	add	sp, #12
 8007296:	bd30      	pop	{r4, r5, pc}
 8007298:	20000220 	.word	0x20000220

0800729c <_malloc_r>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	1ccd      	adds	r5, r1, #3
 80072a0:	f025 0503 	bic.w	r5, r5, #3
 80072a4:	3508      	adds	r5, #8
 80072a6:	2d0c      	cmp	r5, #12
 80072a8:	bf38      	it	cc
 80072aa:	250c      	movcc	r5, #12
 80072ac:	2d00      	cmp	r5, #0
 80072ae:	4606      	mov	r6, r0
 80072b0:	db01      	blt.n	80072b6 <_malloc_r+0x1a>
 80072b2:	42a9      	cmp	r1, r5
 80072b4:	d903      	bls.n	80072be <_malloc_r+0x22>
 80072b6:	230c      	movs	r3, #12
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	2000      	movs	r0, #0
 80072bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072be:	f000 f88b 	bl	80073d8 <__malloc_lock>
 80072c2:	4921      	ldr	r1, [pc, #132]	; (8007348 <_malloc_r+0xac>)
 80072c4:	680a      	ldr	r2, [r1, #0]
 80072c6:	4614      	mov	r4, r2
 80072c8:	b99c      	cbnz	r4, 80072f2 <_malloc_r+0x56>
 80072ca:	4f20      	ldr	r7, [pc, #128]	; (800734c <_malloc_r+0xb0>)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	b923      	cbnz	r3, 80072da <_malloc_r+0x3e>
 80072d0:	4621      	mov	r1, r4
 80072d2:	4630      	mov	r0, r6
 80072d4:	f000 f83c 	bl	8007350 <_sbrk_r>
 80072d8:	6038      	str	r0, [r7, #0]
 80072da:	4629      	mov	r1, r5
 80072dc:	4630      	mov	r0, r6
 80072de:	f000 f837 	bl	8007350 <_sbrk_r>
 80072e2:	1c43      	adds	r3, r0, #1
 80072e4:	d123      	bne.n	800732e <_malloc_r+0x92>
 80072e6:	230c      	movs	r3, #12
 80072e8:	6033      	str	r3, [r6, #0]
 80072ea:	4630      	mov	r0, r6
 80072ec:	f000 f87a 	bl	80073e4 <__malloc_unlock>
 80072f0:	e7e3      	b.n	80072ba <_malloc_r+0x1e>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	1b5b      	subs	r3, r3, r5
 80072f6:	d417      	bmi.n	8007328 <_malloc_r+0x8c>
 80072f8:	2b0b      	cmp	r3, #11
 80072fa:	d903      	bls.n	8007304 <_malloc_r+0x68>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	441c      	add	r4, r3
 8007300:	6025      	str	r5, [r4, #0]
 8007302:	e004      	b.n	800730e <_malloc_r+0x72>
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	42a2      	cmp	r2, r4
 8007308:	bf0c      	ite	eq
 800730a:	600b      	streq	r3, [r1, #0]
 800730c:	6053      	strne	r3, [r2, #4]
 800730e:	4630      	mov	r0, r6
 8007310:	f000 f868 	bl	80073e4 <__malloc_unlock>
 8007314:	f104 000b 	add.w	r0, r4, #11
 8007318:	1d23      	adds	r3, r4, #4
 800731a:	f020 0007 	bic.w	r0, r0, #7
 800731e:	1ac2      	subs	r2, r0, r3
 8007320:	d0cc      	beq.n	80072bc <_malloc_r+0x20>
 8007322:	1a1b      	subs	r3, r3, r0
 8007324:	50a3      	str	r3, [r4, r2]
 8007326:	e7c9      	b.n	80072bc <_malloc_r+0x20>
 8007328:	4622      	mov	r2, r4
 800732a:	6864      	ldr	r4, [r4, #4]
 800732c:	e7cc      	b.n	80072c8 <_malloc_r+0x2c>
 800732e:	1cc4      	adds	r4, r0, #3
 8007330:	f024 0403 	bic.w	r4, r4, #3
 8007334:	42a0      	cmp	r0, r4
 8007336:	d0e3      	beq.n	8007300 <_malloc_r+0x64>
 8007338:	1a21      	subs	r1, r4, r0
 800733a:	4630      	mov	r0, r6
 800733c:	f000 f808 	bl	8007350 <_sbrk_r>
 8007340:	3001      	adds	r0, #1
 8007342:	d1dd      	bne.n	8007300 <_malloc_r+0x64>
 8007344:	e7cf      	b.n	80072e6 <_malloc_r+0x4a>
 8007346:	bf00      	nop
 8007348:	20000220 	.word	0x20000220
 800734c:	20000224 	.word	0x20000224

08007350 <_sbrk_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d06      	ldr	r5, [pc, #24]	; (800736c <_sbrk_r+0x1c>)
 8007354:	2300      	movs	r3, #0
 8007356:	4604      	mov	r4, r0
 8007358:	4608      	mov	r0, r1
 800735a:	602b      	str	r3, [r5, #0]
 800735c:	f7f9 ffae 	bl	80012bc <_sbrk>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_sbrk_r+0x1a>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_sbrk_r+0x1a>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20000c30 	.word	0x20000c30

08007370 <siprintf>:
 8007370:	b40e      	push	{r1, r2, r3}
 8007372:	b500      	push	{lr}
 8007374:	b09c      	sub	sp, #112	; 0x70
 8007376:	ab1d      	add	r3, sp, #116	; 0x74
 8007378:	9002      	str	r0, [sp, #8]
 800737a:	9006      	str	r0, [sp, #24]
 800737c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007380:	4809      	ldr	r0, [pc, #36]	; (80073a8 <siprintf+0x38>)
 8007382:	9107      	str	r1, [sp, #28]
 8007384:	9104      	str	r1, [sp, #16]
 8007386:	4909      	ldr	r1, [pc, #36]	; (80073ac <siprintf+0x3c>)
 8007388:	f853 2b04 	ldr.w	r2, [r3], #4
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	6800      	ldr	r0, [r0, #0]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	a902      	add	r1, sp, #8
 8007394:	f000 f888 	bl	80074a8 <_svfiprintf_r>
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	b01c      	add	sp, #112	; 0x70
 80073a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a4:	b003      	add	sp, #12
 80073a6:	4770      	bx	lr
 80073a8:	20000194 	.word	0x20000194
 80073ac:	ffff0208 	.word	0xffff0208

080073b0 <strncpy>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	3901      	subs	r1, #1
 80073b4:	4603      	mov	r3, r0
 80073b6:	b132      	cbz	r2, 80073c6 <strncpy+0x16>
 80073b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073bc:	f803 4b01 	strb.w	r4, [r3], #1
 80073c0:	3a01      	subs	r2, #1
 80073c2:	2c00      	cmp	r4, #0
 80073c4:	d1f7      	bne.n	80073b6 <strncpy+0x6>
 80073c6:	441a      	add	r2, r3
 80073c8:	2100      	movs	r1, #0
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d100      	bne.n	80073d0 <strncpy+0x20>
 80073ce:	bd10      	pop	{r4, pc}
 80073d0:	f803 1b01 	strb.w	r1, [r3], #1
 80073d4:	e7f9      	b.n	80073ca <strncpy+0x1a>
	...

080073d8 <__malloc_lock>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__malloc_lock+0x8>)
 80073da:	f000 baf9 	b.w	80079d0 <__retarget_lock_acquire_recursive>
 80073de:	bf00      	nop
 80073e0:	20000c38 	.word	0x20000c38

080073e4 <__malloc_unlock>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__malloc_unlock+0x8>)
 80073e6:	f000 baf4 	b.w	80079d2 <__retarget_lock_release_recursive>
 80073ea:	bf00      	nop
 80073ec:	20000c38 	.word	0x20000c38

080073f0 <__ssputs_r>:
 80073f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	688e      	ldr	r6, [r1, #8]
 80073f6:	429e      	cmp	r6, r3
 80073f8:	4682      	mov	sl, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	4690      	mov	r8, r2
 80073fe:	461f      	mov	r7, r3
 8007400:	d838      	bhi.n	8007474 <__ssputs_r+0x84>
 8007402:	898a      	ldrh	r2, [r1, #12]
 8007404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007408:	d032      	beq.n	8007470 <__ssputs_r+0x80>
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	6909      	ldr	r1, [r1, #16]
 800740e:	eba5 0901 	sub.w	r9, r5, r1
 8007412:	6965      	ldr	r5, [r4, #20]
 8007414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800741c:	3301      	adds	r3, #1
 800741e:	444b      	add	r3, r9
 8007420:	106d      	asrs	r5, r5, #1
 8007422:	429d      	cmp	r5, r3
 8007424:	bf38      	it	cc
 8007426:	461d      	movcc	r5, r3
 8007428:	0553      	lsls	r3, r2, #21
 800742a:	d531      	bpl.n	8007490 <__ssputs_r+0xa0>
 800742c:	4629      	mov	r1, r5
 800742e:	f7ff ff35 	bl	800729c <_malloc_r>
 8007432:	4606      	mov	r6, r0
 8007434:	b950      	cbnz	r0, 800744c <__ssputs_r+0x5c>
 8007436:	230c      	movs	r3, #12
 8007438:	f8ca 3000 	str.w	r3, [sl]
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007442:	81a3      	strh	r3, [r4, #12]
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744c:	6921      	ldr	r1, [r4, #16]
 800744e:	464a      	mov	r2, r9
 8007450:	f000 fac0 	bl	80079d4 <memcpy>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	6126      	str	r6, [r4, #16]
 8007462:	6165      	str	r5, [r4, #20]
 8007464:	444e      	add	r6, r9
 8007466:	eba5 0509 	sub.w	r5, r5, r9
 800746a:	6026      	str	r6, [r4, #0]
 800746c:	60a5      	str	r5, [r4, #8]
 800746e:	463e      	mov	r6, r7
 8007470:	42be      	cmp	r6, r7
 8007472:	d900      	bls.n	8007476 <__ssputs_r+0x86>
 8007474:	463e      	mov	r6, r7
 8007476:	4632      	mov	r2, r6
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	4641      	mov	r1, r8
 800747c:	f000 fab8 	bl	80079f0 <memmove>
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	6822      	ldr	r2, [r4, #0]
 8007484:	1b9b      	subs	r3, r3, r6
 8007486:	4432      	add	r2, r6
 8007488:	60a3      	str	r3, [r4, #8]
 800748a:	6022      	str	r2, [r4, #0]
 800748c:	2000      	movs	r0, #0
 800748e:	e7db      	b.n	8007448 <__ssputs_r+0x58>
 8007490:	462a      	mov	r2, r5
 8007492:	f000 fac7 	bl	8007a24 <_realloc_r>
 8007496:	4606      	mov	r6, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	d1e1      	bne.n	8007460 <__ssputs_r+0x70>
 800749c:	6921      	ldr	r1, [r4, #16]
 800749e:	4650      	mov	r0, sl
 80074a0:	f7ff feac 	bl	80071fc <_free_r>
 80074a4:	e7c7      	b.n	8007436 <__ssputs_r+0x46>
	...

080074a8 <_svfiprintf_r>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4698      	mov	r8, r3
 80074ae:	898b      	ldrh	r3, [r1, #12]
 80074b0:	061b      	lsls	r3, r3, #24
 80074b2:	b09d      	sub	sp, #116	; 0x74
 80074b4:	4607      	mov	r7, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	d50e      	bpl.n	80074da <_svfiprintf_r+0x32>
 80074bc:	690b      	ldr	r3, [r1, #16]
 80074be:	b963      	cbnz	r3, 80074da <_svfiprintf_r+0x32>
 80074c0:	2140      	movs	r1, #64	; 0x40
 80074c2:	f7ff feeb 	bl	800729c <_malloc_r>
 80074c6:	6028      	str	r0, [r5, #0]
 80074c8:	6128      	str	r0, [r5, #16]
 80074ca:	b920      	cbnz	r0, 80074d6 <_svfiprintf_r+0x2e>
 80074cc:	230c      	movs	r3, #12
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	e0d1      	b.n	800767a <_svfiprintf_r+0x1d2>
 80074d6:	2340      	movs	r3, #64	; 0x40
 80074d8:	616b      	str	r3, [r5, #20]
 80074da:	2300      	movs	r3, #0
 80074dc:	9309      	str	r3, [sp, #36]	; 0x24
 80074de:	2320      	movs	r3, #32
 80074e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80074e8:	2330      	movs	r3, #48	; 0x30
 80074ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007694 <_svfiprintf_r+0x1ec>
 80074ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074f2:	f04f 0901 	mov.w	r9, #1
 80074f6:	4623      	mov	r3, r4
 80074f8:	469a      	mov	sl, r3
 80074fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074fe:	b10a      	cbz	r2, 8007504 <_svfiprintf_r+0x5c>
 8007500:	2a25      	cmp	r2, #37	; 0x25
 8007502:	d1f9      	bne.n	80074f8 <_svfiprintf_r+0x50>
 8007504:	ebba 0b04 	subs.w	fp, sl, r4
 8007508:	d00b      	beq.n	8007522 <_svfiprintf_r+0x7a>
 800750a:	465b      	mov	r3, fp
 800750c:	4622      	mov	r2, r4
 800750e:	4629      	mov	r1, r5
 8007510:	4638      	mov	r0, r7
 8007512:	f7ff ff6d 	bl	80073f0 <__ssputs_r>
 8007516:	3001      	adds	r0, #1
 8007518:	f000 80aa 	beq.w	8007670 <_svfiprintf_r+0x1c8>
 800751c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800751e:	445a      	add	r2, fp
 8007520:	9209      	str	r2, [sp, #36]	; 0x24
 8007522:	f89a 3000 	ldrb.w	r3, [sl]
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80a2 	beq.w	8007670 <_svfiprintf_r+0x1c8>
 800752c:	2300      	movs	r3, #0
 800752e:	f04f 32ff 	mov.w	r2, #4294967295
 8007532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007536:	f10a 0a01 	add.w	sl, sl, #1
 800753a:	9304      	str	r3, [sp, #16]
 800753c:	9307      	str	r3, [sp, #28]
 800753e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007542:	931a      	str	r3, [sp, #104]	; 0x68
 8007544:	4654      	mov	r4, sl
 8007546:	2205      	movs	r2, #5
 8007548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754c:	4851      	ldr	r0, [pc, #324]	; (8007694 <_svfiprintf_r+0x1ec>)
 800754e:	f7f8 fe3f 	bl	80001d0 <memchr>
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	b9d8      	cbnz	r0, 800758e <_svfiprintf_r+0xe6>
 8007556:	06d0      	lsls	r0, r2, #27
 8007558:	bf44      	itt	mi
 800755a:	2320      	movmi	r3, #32
 800755c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007560:	0711      	lsls	r1, r2, #28
 8007562:	bf44      	itt	mi
 8007564:	232b      	movmi	r3, #43	; 0x2b
 8007566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800756a:	f89a 3000 	ldrb.w	r3, [sl]
 800756e:	2b2a      	cmp	r3, #42	; 0x2a
 8007570:	d015      	beq.n	800759e <_svfiprintf_r+0xf6>
 8007572:	9a07      	ldr	r2, [sp, #28]
 8007574:	4654      	mov	r4, sl
 8007576:	2000      	movs	r0, #0
 8007578:	f04f 0c0a 	mov.w	ip, #10
 800757c:	4621      	mov	r1, r4
 800757e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007582:	3b30      	subs	r3, #48	; 0x30
 8007584:	2b09      	cmp	r3, #9
 8007586:	d94e      	bls.n	8007626 <_svfiprintf_r+0x17e>
 8007588:	b1b0      	cbz	r0, 80075b8 <_svfiprintf_r+0x110>
 800758a:	9207      	str	r2, [sp, #28]
 800758c:	e014      	b.n	80075b8 <_svfiprintf_r+0x110>
 800758e:	eba0 0308 	sub.w	r3, r0, r8
 8007592:	fa09 f303 	lsl.w	r3, r9, r3
 8007596:	4313      	orrs	r3, r2
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	46a2      	mov	sl, r4
 800759c:	e7d2      	b.n	8007544 <_svfiprintf_r+0x9c>
 800759e:	9b03      	ldr	r3, [sp, #12]
 80075a0:	1d19      	adds	r1, r3, #4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	9103      	str	r1, [sp, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bfbb      	ittet	lt
 80075aa:	425b      	neglt	r3, r3
 80075ac:	f042 0202 	orrlt.w	r2, r2, #2
 80075b0:	9307      	strge	r3, [sp, #28]
 80075b2:	9307      	strlt	r3, [sp, #28]
 80075b4:	bfb8      	it	lt
 80075b6:	9204      	strlt	r2, [sp, #16]
 80075b8:	7823      	ldrb	r3, [r4, #0]
 80075ba:	2b2e      	cmp	r3, #46	; 0x2e
 80075bc:	d10c      	bne.n	80075d8 <_svfiprintf_r+0x130>
 80075be:	7863      	ldrb	r3, [r4, #1]
 80075c0:	2b2a      	cmp	r3, #42	; 0x2a
 80075c2:	d135      	bne.n	8007630 <_svfiprintf_r+0x188>
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	1d1a      	adds	r2, r3, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	9203      	str	r2, [sp, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bfb8      	it	lt
 80075d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80075d4:	3402      	adds	r4, #2
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076a4 <_svfiprintf_r+0x1fc>
 80075dc:	7821      	ldrb	r1, [r4, #0]
 80075de:	2203      	movs	r2, #3
 80075e0:	4650      	mov	r0, sl
 80075e2:	f7f8 fdf5 	bl	80001d0 <memchr>
 80075e6:	b140      	cbz	r0, 80075fa <_svfiprintf_r+0x152>
 80075e8:	2340      	movs	r3, #64	; 0x40
 80075ea:	eba0 000a 	sub.w	r0, r0, sl
 80075ee:	fa03 f000 	lsl.w	r0, r3, r0
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	4303      	orrs	r3, r0
 80075f6:	3401      	adds	r4, #1
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fe:	4826      	ldr	r0, [pc, #152]	; (8007698 <_svfiprintf_r+0x1f0>)
 8007600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007604:	2206      	movs	r2, #6
 8007606:	f7f8 fde3 	bl	80001d0 <memchr>
 800760a:	2800      	cmp	r0, #0
 800760c:	d038      	beq.n	8007680 <_svfiprintf_r+0x1d8>
 800760e:	4b23      	ldr	r3, [pc, #140]	; (800769c <_svfiprintf_r+0x1f4>)
 8007610:	bb1b      	cbnz	r3, 800765a <_svfiprintf_r+0x1b2>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	3307      	adds	r3, #7
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	3308      	adds	r3, #8
 800761c:	9303      	str	r3, [sp, #12]
 800761e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007620:	4433      	add	r3, r6
 8007622:	9309      	str	r3, [sp, #36]	; 0x24
 8007624:	e767      	b.n	80074f6 <_svfiprintf_r+0x4e>
 8007626:	fb0c 3202 	mla	r2, ip, r2, r3
 800762a:	460c      	mov	r4, r1
 800762c:	2001      	movs	r0, #1
 800762e:	e7a5      	b.n	800757c <_svfiprintf_r+0xd4>
 8007630:	2300      	movs	r3, #0
 8007632:	3401      	adds	r4, #1
 8007634:	9305      	str	r3, [sp, #20]
 8007636:	4619      	mov	r1, r3
 8007638:	f04f 0c0a 	mov.w	ip, #10
 800763c:	4620      	mov	r0, r4
 800763e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007642:	3a30      	subs	r2, #48	; 0x30
 8007644:	2a09      	cmp	r2, #9
 8007646:	d903      	bls.n	8007650 <_svfiprintf_r+0x1a8>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0c5      	beq.n	80075d8 <_svfiprintf_r+0x130>
 800764c:	9105      	str	r1, [sp, #20]
 800764e:	e7c3      	b.n	80075d8 <_svfiprintf_r+0x130>
 8007650:	fb0c 2101 	mla	r1, ip, r1, r2
 8007654:	4604      	mov	r4, r0
 8007656:	2301      	movs	r3, #1
 8007658:	e7f0      	b.n	800763c <_svfiprintf_r+0x194>
 800765a:	ab03      	add	r3, sp, #12
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	462a      	mov	r2, r5
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <_svfiprintf_r+0x1f8>)
 8007662:	a904      	add	r1, sp, #16
 8007664:	4638      	mov	r0, r7
 8007666:	f3af 8000 	nop.w
 800766a:	1c42      	adds	r2, r0, #1
 800766c:	4606      	mov	r6, r0
 800766e:	d1d6      	bne.n	800761e <_svfiprintf_r+0x176>
 8007670:	89ab      	ldrh	r3, [r5, #12]
 8007672:	065b      	lsls	r3, r3, #25
 8007674:	f53f af2c 	bmi.w	80074d0 <_svfiprintf_r+0x28>
 8007678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800767a:	b01d      	add	sp, #116	; 0x74
 800767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007680:	ab03      	add	r3, sp, #12
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	462a      	mov	r2, r5
 8007686:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <_svfiprintf_r+0x1f8>)
 8007688:	a904      	add	r1, sp, #16
 800768a:	4638      	mov	r0, r7
 800768c:	f000 f87a 	bl	8007784 <_printf_i>
 8007690:	e7eb      	b.n	800766a <_svfiprintf_r+0x1c2>
 8007692:	bf00      	nop
 8007694:	08007b74 	.word	0x08007b74
 8007698:	08007b7e 	.word	0x08007b7e
 800769c:	00000000 	.word	0x00000000
 80076a0:	080073f1 	.word	0x080073f1
 80076a4:	08007b7a 	.word	0x08007b7a

080076a8 <_printf_common>:
 80076a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	4616      	mov	r6, r2
 80076ae:	4699      	mov	r9, r3
 80076b0:	688a      	ldr	r2, [r1, #8]
 80076b2:	690b      	ldr	r3, [r1, #16]
 80076b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076b8:	4293      	cmp	r3, r2
 80076ba:	bfb8      	it	lt
 80076bc:	4613      	movlt	r3, r2
 80076be:	6033      	str	r3, [r6, #0]
 80076c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076c4:	4607      	mov	r7, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b10a      	cbz	r2, 80076ce <_printf_common+0x26>
 80076ca:	3301      	adds	r3, #1
 80076cc:	6033      	str	r3, [r6, #0]
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	0699      	lsls	r1, r3, #26
 80076d2:	bf42      	ittt	mi
 80076d4:	6833      	ldrmi	r3, [r6, #0]
 80076d6:	3302      	addmi	r3, #2
 80076d8:	6033      	strmi	r3, [r6, #0]
 80076da:	6825      	ldr	r5, [r4, #0]
 80076dc:	f015 0506 	ands.w	r5, r5, #6
 80076e0:	d106      	bne.n	80076f0 <_printf_common+0x48>
 80076e2:	f104 0a19 	add.w	sl, r4, #25
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	6832      	ldr	r2, [r6, #0]
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dc26      	bgt.n	800773e <_printf_common+0x96>
 80076f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076f4:	1e13      	subs	r3, r2, #0
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	bf18      	it	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	0692      	lsls	r2, r2, #26
 80076fe:	d42b      	bmi.n	8007758 <_printf_common+0xb0>
 8007700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007704:	4649      	mov	r1, r9
 8007706:	4638      	mov	r0, r7
 8007708:	47c0      	blx	r8
 800770a:	3001      	adds	r0, #1
 800770c:	d01e      	beq.n	800774c <_printf_common+0xa4>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	68e5      	ldr	r5, [r4, #12]
 8007712:	6832      	ldr	r2, [r6, #0]
 8007714:	f003 0306 	and.w	r3, r3, #6
 8007718:	2b04      	cmp	r3, #4
 800771a:	bf08      	it	eq
 800771c:	1aad      	subeq	r5, r5, r2
 800771e:	68a3      	ldr	r3, [r4, #8]
 8007720:	6922      	ldr	r2, [r4, #16]
 8007722:	bf0c      	ite	eq
 8007724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007728:	2500      	movne	r5, #0
 800772a:	4293      	cmp	r3, r2
 800772c:	bfc4      	itt	gt
 800772e:	1a9b      	subgt	r3, r3, r2
 8007730:	18ed      	addgt	r5, r5, r3
 8007732:	2600      	movs	r6, #0
 8007734:	341a      	adds	r4, #26
 8007736:	42b5      	cmp	r5, r6
 8007738:	d11a      	bne.n	8007770 <_printf_common+0xc8>
 800773a:	2000      	movs	r0, #0
 800773c:	e008      	b.n	8007750 <_printf_common+0xa8>
 800773e:	2301      	movs	r3, #1
 8007740:	4652      	mov	r2, sl
 8007742:	4649      	mov	r1, r9
 8007744:	4638      	mov	r0, r7
 8007746:	47c0      	blx	r8
 8007748:	3001      	adds	r0, #1
 800774a:	d103      	bne.n	8007754 <_printf_common+0xac>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	3501      	adds	r5, #1
 8007756:	e7c6      	b.n	80076e6 <_printf_common+0x3e>
 8007758:	18e1      	adds	r1, r4, r3
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	2030      	movs	r0, #48	; 0x30
 800775e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007762:	4422      	add	r2, r4
 8007764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800776c:	3302      	adds	r3, #2
 800776e:	e7c7      	b.n	8007700 <_printf_common+0x58>
 8007770:	2301      	movs	r3, #1
 8007772:	4622      	mov	r2, r4
 8007774:	4649      	mov	r1, r9
 8007776:	4638      	mov	r0, r7
 8007778:	47c0      	blx	r8
 800777a:	3001      	adds	r0, #1
 800777c:	d0e6      	beq.n	800774c <_printf_common+0xa4>
 800777e:	3601      	adds	r6, #1
 8007780:	e7d9      	b.n	8007736 <_printf_common+0x8e>
	...

08007784 <_printf_i>:
 8007784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	460c      	mov	r4, r1
 800778a:	4691      	mov	r9, r2
 800778c:	7e27      	ldrb	r7, [r4, #24]
 800778e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007790:	2f78      	cmp	r7, #120	; 0x78
 8007792:	4680      	mov	r8, r0
 8007794:	469a      	mov	sl, r3
 8007796:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800779a:	d807      	bhi.n	80077ac <_printf_i+0x28>
 800779c:	2f62      	cmp	r7, #98	; 0x62
 800779e:	d80a      	bhi.n	80077b6 <_printf_i+0x32>
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	f000 80d8 	beq.w	8007956 <_printf_i+0x1d2>
 80077a6:	2f58      	cmp	r7, #88	; 0x58
 80077a8:	f000 80a3 	beq.w	80078f2 <_printf_i+0x16e>
 80077ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077b4:	e03a      	b.n	800782c <_printf_i+0xa8>
 80077b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ba:	2b15      	cmp	r3, #21
 80077bc:	d8f6      	bhi.n	80077ac <_printf_i+0x28>
 80077be:	a001      	add	r0, pc, #4	; (adr r0, 80077c4 <_printf_i+0x40>)
 80077c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80077c4:	0800781d 	.word	0x0800781d
 80077c8:	08007831 	.word	0x08007831
 80077cc:	080077ad 	.word	0x080077ad
 80077d0:	080077ad 	.word	0x080077ad
 80077d4:	080077ad 	.word	0x080077ad
 80077d8:	080077ad 	.word	0x080077ad
 80077dc:	08007831 	.word	0x08007831
 80077e0:	080077ad 	.word	0x080077ad
 80077e4:	080077ad 	.word	0x080077ad
 80077e8:	080077ad 	.word	0x080077ad
 80077ec:	080077ad 	.word	0x080077ad
 80077f0:	0800793d 	.word	0x0800793d
 80077f4:	08007861 	.word	0x08007861
 80077f8:	0800791f 	.word	0x0800791f
 80077fc:	080077ad 	.word	0x080077ad
 8007800:	080077ad 	.word	0x080077ad
 8007804:	0800795f 	.word	0x0800795f
 8007808:	080077ad 	.word	0x080077ad
 800780c:	08007861 	.word	0x08007861
 8007810:	080077ad 	.word	0x080077ad
 8007814:	080077ad 	.word	0x080077ad
 8007818:	08007927 	.word	0x08007927
 800781c:	680b      	ldr	r3, [r1, #0]
 800781e:	1d1a      	adds	r2, r3, #4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	600a      	str	r2, [r1, #0]
 8007824:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800782c:	2301      	movs	r3, #1
 800782e:	e0a3      	b.n	8007978 <_printf_i+0x1f4>
 8007830:	6825      	ldr	r5, [r4, #0]
 8007832:	6808      	ldr	r0, [r1, #0]
 8007834:	062e      	lsls	r6, r5, #24
 8007836:	f100 0304 	add.w	r3, r0, #4
 800783a:	d50a      	bpl.n	8007852 <_printf_i+0xce>
 800783c:	6805      	ldr	r5, [r0, #0]
 800783e:	600b      	str	r3, [r1, #0]
 8007840:	2d00      	cmp	r5, #0
 8007842:	da03      	bge.n	800784c <_printf_i+0xc8>
 8007844:	232d      	movs	r3, #45	; 0x2d
 8007846:	426d      	negs	r5, r5
 8007848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784c:	485e      	ldr	r0, [pc, #376]	; (80079c8 <_printf_i+0x244>)
 800784e:	230a      	movs	r3, #10
 8007850:	e019      	b.n	8007886 <_printf_i+0x102>
 8007852:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007856:	6805      	ldr	r5, [r0, #0]
 8007858:	600b      	str	r3, [r1, #0]
 800785a:	bf18      	it	ne
 800785c:	b22d      	sxthne	r5, r5
 800785e:	e7ef      	b.n	8007840 <_printf_i+0xbc>
 8007860:	680b      	ldr	r3, [r1, #0]
 8007862:	6825      	ldr	r5, [r4, #0]
 8007864:	1d18      	adds	r0, r3, #4
 8007866:	6008      	str	r0, [r1, #0]
 8007868:	0628      	lsls	r0, r5, #24
 800786a:	d501      	bpl.n	8007870 <_printf_i+0xec>
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	e002      	b.n	8007876 <_printf_i+0xf2>
 8007870:	0669      	lsls	r1, r5, #25
 8007872:	d5fb      	bpl.n	800786c <_printf_i+0xe8>
 8007874:	881d      	ldrh	r5, [r3, #0]
 8007876:	4854      	ldr	r0, [pc, #336]	; (80079c8 <_printf_i+0x244>)
 8007878:	2f6f      	cmp	r7, #111	; 0x6f
 800787a:	bf0c      	ite	eq
 800787c:	2308      	moveq	r3, #8
 800787e:	230a      	movne	r3, #10
 8007880:	2100      	movs	r1, #0
 8007882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007886:	6866      	ldr	r6, [r4, #4]
 8007888:	60a6      	str	r6, [r4, #8]
 800788a:	2e00      	cmp	r6, #0
 800788c:	bfa2      	ittt	ge
 800788e:	6821      	ldrge	r1, [r4, #0]
 8007890:	f021 0104 	bicge.w	r1, r1, #4
 8007894:	6021      	strge	r1, [r4, #0]
 8007896:	b90d      	cbnz	r5, 800789c <_printf_i+0x118>
 8007898:	2e00      	cmp	r6, #0
 800789a:	d04d      	beq.n	8007938 <_printf_i+0x1b4>
 800789c:	4616      	mov	r6, r2
 800789e:	fbb5 f1f3 	udiv	r1, r5, r3
 80078a2:	fb03 5711 	mls	r7, r3, r1, r5
 80078a6:	5dc7      	ldrb	r7, [r0, r7]
 80078a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078ac:	462f      	mov	r7, r5
 80078ae:	42bb      	cmp	r3, r7
 80078b0:	460d      	mov	r5, r1
 80078b2:	d9f4      	bls.n	800789e <_printf_i+0x11a>
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d10b      	bne.n	80078d0 <_printf_i+0x14c>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	07df      	lsls	r7, r3, #31
 80078bc:	d508      	bpl.n	80078d0 <_printf_i+0x14c>
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	6861      	ldr	r1, [r4, #4]
 80078c2:	4299      	cmp	r1, r3
 80078c4:	bfde      	ittt	le
 80078c6:	2330      	movle	r3, #48	; 0x30
 80078c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078d0:	1b92      	subs	r2, r2, r6
 80078d2:	6122      	str	r2, [r4, #16]
 80078d4:	f8cd a000 	str.w	sl, [sp]
 80078d8:	464b      	mov	r3, r9
 80078da:	aa03      	add	r2, sp, #12
 80078dc:	4621      	mov	r1, r4
 80078de:	4640      	mov	r0, r8
 80078e0:	f7ff fee2 	bl	80076a8 <_printf_common>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d14c      	bne.n	8007982 <_printf_i+0x1fe>
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	b004      	add	sp, #16
 80078ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f2:	4835      	ldr	r0, [pc, #212]	; (80079c8 <_printf_i+0x244>)
 80078f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	680e      	ldr	r6, [r1, #0]
 80078fc:	061f      	lsls	r7, r3, #24
 80078fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007902:	600e      	str	r6, [r1, #0]
 8007904:	d514      	bpl.n	8007930 <_printf_i+0x1ac>
 8007906:	07d9      	lsls	r1, r3, #31
 8007908:	bf44      	itt	mi
 800790a:	f043 0320 	orrmi.w	r3, r3, #32
 800790e:	6023      	strmi	r3, [r4, #0]
 8007910:	b91d      	cbnz	r5, 800791a <_printf_i+0x196>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	f023 0320 	bic.w	r3, r3, #32
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	2310      	movs	r3, #16
 800791c:	e7b0      	b.n	8007880 <_printf_i+0xfc>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	f043 0320 	orr.w	r3, r3, #32
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	2378      	movs	r3, #120	; 0x78
 8007928:	4828      	ldr	r0, [pc, #160]	; (80079cc <_printf_i+0x248>)
 800792a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800792e:	e7e3      	b.n	80078f8 <_printf_i+0x174>
 8007930:	065e      	lsls	r6, r3, #25
 8007932:	bf48      	it	mi
 8007934:	b2ad      	uxthmi	r5, r5
 8007936:	e7e6      	b.n	8007906 <_printf_i+0x182>
 8007938:	4616      	mov	r6, r2
 800793a:	e7bb      	b.n	80078b4 <_printf_i+0x130>
 800793c:	680b      	ldr	r3, [r1, #0]
 800793e:	6826      	ldr	r6, [r4, #0]
 8007940:	6960      	ldr	r0, [r4, #20]
 8007942:	1d1d      	adds	r5, r3, #4
 8007944:	600d      	str	r5, [r1, #0]
 8007946:	0635      	lsls	r5, r6, #24
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	d501      	bpl.n	8007950 <_printf_i+0x1cc>
 800794c:	6018      	str	r0, [r3, #0]
 800794e:	e002      	b.n	8007956 <_printf_i+0x1d2>
 8007950:	0671      	lsls	r1, r6, #25
 8007952:	d5fb      	bpl.n	800794c <_printf_i+0x1c8>
 8007954:	8018      	strh	r0, [r3, #0]
 8007956:	2300      	movs	r3, #0
 8007958:	6123      	str	r3, [r4, #16]
 800795a:	4616      	mov	r6, r2
 800795c:	e7ba      	b.n	80078d4 <_printf_i+0x150>
 800795e:	680b      	ldr	r3, [r1, #0]
 8007960:	1d1a      	adds	r2, r3, #4
 8007962:	600a      	str	r2, [r1, #0]
 8007964:	681e      	ldr	r6, [r3, #0]
 8007966:	6862      	ldr	r2, [r4, #4]
 8007968:	2100      	movs	r1, #0
 800796a:	4630      	mov	r0, r6
 800796c:	f7f8 fc30 	bl	80001d0 <memchr>
 8007970:	b108      	cbz	r0, 8007976 <_printf_i+0x1f2>
 8007972:	1b80      	subs	r0, r0, r6
 8007974:	6060      	str	r0, [r4, #4]
 8007976:	6863      	ldr	r3, [r4, #4]
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	2300      	movs	r3, #0
 800797c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007980:	e7a8      	b.n	80078d4 <_printf_i+0x150>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	4632      	mov	r2, r6
 8007986:	4649      	mov	r1, r9
 8007988:	4640      	mov	r0, r8
 800798a:	47d0      	blx	sl
 800798c:	3001      	adds	r0, #1
 800798e:	d0ab      	beq.n	80078e8 <_printf_i+0x164>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	079b      	lsls	r3, r3, #30
 8007994:	d413      	bmi.n	80079be <_printf_i+0x23a>
 8007996:	68e0      	ldr	r0, [r4, #12]
 8007998:	9b03      	ldr	r3, [sp, #12]
 800799a:	4298      	cmp	r0, r3
 800799c:	bfb8      	it	lt
 800799e:	4618      	movlt	r0, r3
 80079a0:	e7a4      	b.n	80078ec <_printf_i+0x168>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4632      	mov	r2, r6
 80079a6:	4649      	mov	r1, r9
 80079a8:	4640      	mov	r0, r8
 80079aa:	47d0      	blx	sl
 80079ac:	3001      	adds	r0, #1
 80079ae:	d09b      	beq.n	80078e8 <_printf_i+0x164>
 80079b0:	3501      	adds	r5, #1
 80079b2:	68e3      	ldr	r3, [r4, #12]
 80079b4:	9903      	ldr	r1, [sp, #12]
 80079b6:	1a5b      	subs	r3, r3, r1
 80079b8:	42ab      	cmp	r3, r5
 80079ba:	dcf2      	bgt.n	80079a2 <_printf_i+0x21e>
 80079bc:	e7eb      	b.n	8007996 <_printf_i+0x212>
 80079be:	2500      	movs	r5, #0
 80079c0:	f104 0619 	add.w	r6, r4, #25
 80079c4:	e7f5      	b.n	80079b2 <_printf_i+0x22e>
 80079c6:	bf00      	nop
 80079c8:	08007b85 	.word	0x08007b85
 80079cc:	08007b96 	.word	0x08007b96

080079d0 <__retarget_lock_acquire_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <__retarget_lock_release_recursive>:
 80079d2:	4770      	bx	lr

080079d4 <memcpy>:
 80079d4:	440a      	add	r2, r1
 80079d6:	4291      	cmp	r1, r2
 80079d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079dc:	d100      	bne.n	80079e0 <memcpy+0xc>
 80079de:	4770      	bx	lr
 80079e0:	b510      	push	{r4, lr}
 80079e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ea:	4291      	cmp	r1, r2
 80079ec:	d1f9      	bne.n	80079e2 <memcpy+0xe>
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <memmove>:
 80079f0:	4288      	cmp	r0, r1
 80079f2:	b510      	push	{r4, lr}
 80079f4:	eb01 0402 	add.w	r4, r1, r2
 80079f8:	d902      	bls.n	8007a00 <memmove+0x10>
 80079fa:	4284      	cmp	r4, r0
 80079fc:	4623      	mov	r3, r4
 80079fe:	d807      	bhi.n	8007a10 <memmove+0x20>
 8007a00:	1e43      	subs	r3, r0, #1
 8007a02:	42a1      	cmp	r1, r4
 8007a04:	d008      	beq.n	8007a18 <memmove+0x28>
 8007a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a0e:	e7f8      	b.n	8007a02 <memmove+0x12>
 8007a10:	4402      	add	r2, r0
 8007a12:	4601      	mov	r1, r0
 8007a14:	428a      	cmp	r2, r1
 8007a16:	d100      	bne.n	8007a1a <memmove+0x2a>
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a22:	e7f7      	b.n	8007a14 <memmove+0x24>

08007a24 <_realloc_r>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	4607      	mov	r7, r0
 8007a28:	4614      	mov	r4, r2
 8007a2a:	460e      	mov	r6, r1
 8007a2c:	b921      	cbnz	r1, 8007a38 <_realloc_r+0x14>
 8007a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a32:	4611      	mov	r1, r2
 8007a34:	f7ff bc32 	b.w	800729c <_malloc_r>
 8007a38:	b922      	cbnz	r2, 8007a44 <_realloc_r+0x20>
 8007a3a:	f7ff fbdf 	bl	80071fc <_free_r>
 8007a3e:	4625      	mov	r5, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a44:	f000 f814 	bl	8007a70 <_malloc_usable_size_r>
 8007a48:	42a0      	cmp	r0, r4
 8007a4a:	d20f      	bcs.n	8007a6c <_realloc_r+0x48>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f7ff fc24 	bl	800729c <_malloc_r>
 8007a54:	4605      	mov	r5, r0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d0f2      	beq.n	8007a40 <_realloc_r+0x1c>
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	f7ff ffb9 	bl	80079d4 <memcpy>
 8007a62:	4631      	mov	r1, r6
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7ff fbc9 	bl	80071fc <_free_r>
 8007a6a:	e7e9      	b.n	8007a40 <_realloc_r+0x1c>
 8007a6c:	4635      	mov	r5, r6
 8007a6e:	e7e7      	b.n	8007a40 <_realloc_r+0x1c>

08007a70 <_malloc_usable_size_r>:
 8007a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a74:	1f18      	subs	r0, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bfbc      	itt	lt
 8007a7a:	580b      	ldrlt	r3, [r1, r0]
 8007a7c:	18c0      	addlt	r0, r0, r3
 8007a7e:	4770      	bx	lr

08007a80 <_init>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr

08007a8c <_fini>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	bf00      	nop
 8007a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a92:	bc08      	pop	{r3}
 8007a94:	469e      	mov	lr, r3
 8007a96:	4770      	bx	lr
